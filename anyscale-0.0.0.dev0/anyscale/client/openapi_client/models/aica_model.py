# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AicaModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'emoji': 'str',
        'description': 'str',
        'base_canonical_model_id': 'str',
        'min_aviary_version': 'str',
        'max_aviary_version': 'str',
        'model_object_storage_uri': 'str',
        'is_model_stored_in_anyscale_account': 'bool',
        'generation_configuration_json': 'object',
        'created_at': 'datetime',
        'cloud': 'NamedEntity'
    }

    attribute_map = {
        'id': 'id',
        'emoji': 'emoji',
        'description': 'description',
        'base_canonical_model_id': 'base_canonical_model_id',
        'min_aviary_version': 'min_aviary_version',
        'max_aviary_version': 'max_aviary_version',
        'model_object_storage_uri': 'model_object_storage_uri',
        'is_model_stored_in_anyscale_account': 'is_model_stored_in_anyscale_account',
        'generation_configuration_json': 'generation_configuration_json',
        'created_at': 'created_at',
        'cloud': 'cloud'
    }

    def __init__(self, id=None, emoji=None, description=None, base_canonical_model_id=None, min_aviary_version=None, max_aviary_version=None, model_object_storage_uri=None, is_model_stored_in_anyscale_account=None, generation_configuration_json=None, created_at=None, cloud=None, local_vars_configuration=None):  # noqa: E501
        """AicaModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._emoji = None
        self._description = None
        self._base_canonical_model_id = None
        self._min_aviary_version = None
        self._max_aviary_version = None
        self._model_object_storage_uri = None
        self._is_model_stored_in_anyscale_account = None
        self._generation_configuration_json = None
        self._created_at = None
        self._cloud = None
        self.discriminator = None

        self.id = id
        if emoji is not None:
            self.emoji = emoji
        if description is not None:
            self.description = description
        if base_canonical_model_id is not None:
            self.base_canonical_model_id = base_canonical_model_id
        if min_aviary_version is not None:
            self.min_aviary_version = min_aviary_version
        if max_aviary_version is not None:
            self.max_aviary_version = max_aviary_version
        if model_object_storage_uri is not None:
            self.model_object_storage_uri = model_object_storage_uri
        if is_model_stored_in_anyscale_account is not None:
            self.is_model_stored_in_anyscale_account = is_model_stored_in_anyscale_account
        if generation_configuration_json is not None:
            self.generation_configuration_json = generation_configuration_json
        self.created_at = created_at
        if cloud is not None:
            self.cloud = cloud

    @property
    def id(self):
        """Gets the id of this AicaModel.  # noqa: E501

        Name of the model to be created.  # noqa: E501

        :return: The id of this AicaModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AicaModel.

        Name of the model to be created.  # noqa: E501

        :param id: The id of this AicaModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def emoji(self):
        """Gets the emoji of this AicaModel.  # noqa: E501

        The emoji of the model  # noqa: E501

        :return: The emoji of this AicaModel.  # noqa: E501
        :rtype: str
        """
        return self._emoji

    @emoji.setter
    def emoji(self, emoji):
        """Sets the emoji of this AicaModel.

        The emoji of the model  # noqa: E501

        :param emoji: The emoji of this AicaModel.  # noqa: E501
        :type: str
        """

        self._emoji = emoji

    @property
    def description(self):
        """Gets the description of this AicaModel.  # noqa: E501

        The description of the model  # noqa: E501

        :return: The description of this AicaModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AicaModel.

        The description of the model  # noqa: E501

        :param description: The description of this AicaModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def base_canonical_model_id(self):
        """Gets the base_canonical_model_id of this AicaModel.  # noqa: E501

        The name of the base model. This field is present only if the model is finetuned.  # noqa: E501

        :return: The base_canonical_model_id of this AicaModel.  # noqa: E501
        :rtype: str
        """
        return self._base_canonical_model_id

    @base_canonical_model_id.setter
    def base_canonical_model_id(self, base_canonical_model_id):
        """Sets the base_canonical_model_id of this AicaModel.

        The name of the base model. This field is present only if the model is finetuned.  # noqa: E501

        :param base_canonical_model_id: The base_canonical_model_id of this AicaModel.  # noqa: E501
        :type: str
        """

        self._base_canonical_model_id = base_canonical_model_id

    @property
    def min_aviary_version(self):
        """Gets the min_aviary_version of this AicaModel.  # noqa: E501


        :return: The min_aviary_version of this AicaModel.  # noqa: E501
        :rtype: str
        """
        return self._min_aviary_version

    @min_aviary_version.setter
    def min_aviary_version(self, min_aviary_version):
        """Sets the min_aviary_version of this AicaModel.


        :param min_aviary_version: The min_aviary_version of this AicaModel.  # noqa: E501
        :type: str
        """

        self._min_aviary_version = min_aviary_version

    @property
    def max_aviary_version(self):
        """Gets the max_aviary_version of this AicaModel.  # noqa: E501


        :return: The max_aviary_version of this AicaModel.  # noqa: E501
        :rtype: str
        """
        return self._max_aviary_version

    @max_aviary_version.setter
    def max_aviary_version(self, max_aviary_version):
        """Sets the max_aviary_version of this AicaModel.


        :param max_aviary_version: The max_aviary_version of this AicaModel.  # noqa: E501
        :type: str
        """

        self._max_aviary_version = max_aviary_version

    @property
    def model_object_storage_uri(self):
        """Gets the model_object_storage_uri of this AicaModel.  # noqa: E501

        The URI of the model object in the object storage.  # noqa: E501

        :return: The model_object_storage_uri of this AicaModel.  # noqa: E501
        :rtype: str
        """
        return self._model_object_storage_uri

    @model_object_storage_uri.setter
    def model_object_storage_uri(self, model_object_storage_uri):
        """Sets the model_object_storage_uri of this AicaModel.

        The URI of the model object in the object storage.  # noqa: E501

        :param model_object_storage_uri: The model_object_storage_uri of this AicaModel.  # noqa: E501
        :type: str
        """

        self._model_object_storage_uri = model_object_storage_uri

    @property
    def is_model_stored_in_anyscale_account(self):
        """Gets the is_model_stored_in_anyscale_account of this AicaModel.  # noqa: E501

        Whether the model is stored in the anyscale account or in the customer's account.  # noqa: E501

        :return: The is_model_stored_in_anyscale_account of this AicaModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_model_stored_in_anyscale_account

    @is_model_stored_in_anyscale_account.setter
    def is_model_stored_in_anyscale_account(self, is_model_stored_in_anyscale_account):
        """Sets the is_model_stored_in_anyscale_account of this AicaModel.

        Whether the model is stored in the anyscale account or in the customer's account.  # noqa: E501

        :param is_model_stored_in_anyscale_account: The is_model_stored_in_anyscale_account of this AicaModel.  # noqa: E501
        :type: bool
        """

        self._is_model_stored_in_anyscale_account = is_model_stored_in_anyscale_account

    @property
    def generation_configuration_json(self):
        """Gets the generation_configuration_json of this AicaModel.  # noqa: E501

        The configuration for the generation section. This field is present only if the model is finetuned.  # noqa: E501

        :return: The generation_configuration_json of this AicaModel.  # noqa: E501
        :rtype: object
        """
        return self._generation_configuration_json

    @generation_configuration_json.setter
    def generation_configuration_json(self, generation_configuration_json):
        """Sets the generation_configuration_json of this AicaModel.

        The configuration for the generation section. This field is present only if the model is finetuned.  # noqa: E501

        :param generation_configuration_json: The generation_configuration_json of this AicaModel.  # noqa: E501
        :type: object
        """

        self._generation_configuration_json = generation_configuration_json

    @property
    def created_at(self):
        """Gets the created_at of this AicaModel.  # noqa: E501

        Time at which the model was created.  # noqa: E501

        :return: The created_at of this AicaModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AicaModel.

        Time at which the model was created.  # noqa: E501

        :param created_at: The created_at of this AicaModel.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def cloud(self):
        """Gets the cloud of this AicaModel.  # noqa: E501


        :return: The cloud of this AicaModel.  # noqa: E501
        :rtype: NamedEntity
        """
        return self._cloud

    @cloud.setter
    def cloud(self, cloud):
        """Sets the cloud of this AicaModel.


        :param cloud: The cloud of this AicaModel.  # noqa: E501
        :type: NamedEntity
        """

        self._cloud = cloud

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AicaModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AicaModel):
            return True

        return self.to_dict() != other.to_dict()
