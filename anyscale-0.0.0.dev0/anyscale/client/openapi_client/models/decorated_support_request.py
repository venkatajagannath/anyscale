# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DecoratedSupportRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'requester_id': 'str',
        'organization_id': 'str',
        'requested_at': 'datetime',
        'expires_at': 'datetime',
        'requester': 'MiniUser',
        'organization': 'MiniOrganization'
    }

    attribute_map = {
        'id': 'id',
        'requester_id': 'requester_id',
        'organization_id': 'organization_id',
        'requested_at': 'requested_at',
        'expires_at': 'expires_at',
        'requester': 'requester',
        'organization': 'organization'
    }

    def __init__(self, id=None, requester_id=None, organization_id=None, requested_at=None, expires_at=None, requester=None, organization=None, local_vars_configuration=None):  # noqa: E501
        """DecoratedSupportRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._requester_id = None
        self._organization_id = None
        self._requested_at = None
        self._expires_at = None
        self._requester = None
        self._organization = None
        self.discriminator = None

        self.id = id
        self.requester_id = requester_id
        self.organization_id = organization_id
        self.requested_at = requested_at
        self.expires_at = expires_at
        self.requester = requester
        self.organization = organization

    @property
    def id(self):
        """Gets the id of this DecoratedSupportRequest.  # noqa: E501


        :return: The id of this DecoratedSupportRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DecoratedSupportRequest.


        :param id: The id of this DecoratedSupportRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def requester_id(self):
        """Gets the requester_id of this DecoratedSupportRequest.  # noqa: E501


        :return: The requester_id of this DecoratedSupportRequest.  # noqa: E501
        :rtype: str
        """
        return self._requester_id

    @requester_id.setter
    def requester_id(self, requester_id):
        """Sets the requester_id of this DecoratedSupportRequest.


        :param requester_id: The requester_id of this DecoratedSupportRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and requester_id is None:  # noqa: E501
            raise ValueError("Invalid value for `requester_id`, must not be `None`")  # noqa: E501

        self._requester_id = requester_id

    @property
    def organization_id(self):
        """Gets the organization_id of this DecoratedSupportRequest.  # noqa: E501


        :return: The organization_id of this DecoratedSupportRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DecoratedSupportRequest.


        :param organization_id: The organization_id of this DecoratedSupportRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and organization_id is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def requested_at(self):
        """Gets the requested_at of this DecoratedSupportRequest.  # noqa: E501


        :return: The requested_at of this DecoratedSupportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._requested_at

    @requested_at.setter
    def requested_at(self, requested_at):
        """Sets the requested_at of this DecoratedSupportRequest.


        :param requested_at: The requested_at of this DecoratedSupportRequest.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and requested_at is None:  # noqa: E501
            raise ValueError("Invalid value for `requested_at`, must not be `None`")  # noqa: E501

        self._requested_at = requested_at

    @property
    def expires_at(self):
        """Gets the expires_at of this DecoratedSupportRequest.  # noqa: E501


        :return: The expires_at of this DecoratedSupportRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this DecoratedSupportRequest.


        :param expires_at: The expires_at of this DecoratedSupportRequest.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and expires_at is None:  # noqa: E501
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    @property
    def requester(self):
        """Gets the requester of this DecoratedSupportRequest.  # noqa: E501


        :return: The requester of this DecoratedSupportRequest.  # noqa: E501
        :rtype: MiniUser
        """
        return self._requester

    @requester.setter
    def requester(self, requester):
        """Sets the requester of this DecoratedSupportRequest.


        :param requester: The requester of this DecoratedSupportRequest.  # noqa: E501
        :type: MiniUser
        """
        if self.local_vars_configuration.client_side_validation and requester is None:  # noqa: E501
            raise ValueError("Invalid value for `requester`, must not be `None`")  # noqa: E501

        self._requester = requester

    @property
    def organization(self):
        """Gets the organization of this DecoratedSupportRequest.  # noqa: E501


        :return: The organization of this DecoratedSupportRequest.  # noqa: E501
        :rtype: MiniOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this DecoratedSupportRequest.


        :param organization: The organization of this DecoratedSupportRequest.  # noqa: E501
        :type: MiniOrganization
        """
        if self.local_vars_configuration.client_side_validation and organization is None:  # noqa: E501
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecoratedSupportRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DecoratedSupportRequest):
            return True

        return self.to_dict() != other.to_dict()
