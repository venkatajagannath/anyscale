# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class GCPFileStoreConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'instance_name': 'str',
        'mount_target_ip': 'str',
        'root_dir': 'str'
    }

    attribute_map = {
        'instance_name': 'instance_name',
        'mount_target_ip': 'mount_target_ip',
        'root_dir': 'root_dir'
    }

    def __init__(self, instance_name=None, mount_target_ip=None, root_dir=None, local_vars_configuration=None):  # noqa: E501
        """GCPFileStoreConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._instance_name = None
        self._mount_target_ip = None
        self._root_dir = None
        self.discriminator = None

        self.instance_name = instance_name
        self.mount_target_ip = mount_target_ip
        self.root_dir = root_dir

    @property
    def instance_name(self):
        """Gets the instance_name of this GCPFileStoreConfig.  # noqa: E501


        :return: The instance_name of this GCPFileStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this GCPFileStoreConfig.


        :param instance_name: The instance_name of this GCPFileStoreConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and instance_name is None:  # noqa: E501
            raise ValueError("Invalid value for `instance_name`, must not be `None`")  # noqa: E501

        self._instance_name = instance_name

    @property
    def mount_target_ip(self):
        """Gets the mount_target_ip of this GCPFileStoreConfig.  # noqa: E501


        :return: The mount_target_ip of this GCPFileStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._mount_target_ip

    @mount_target_ip.setter
    def mount_target_ip(self, mount_target_ip):
        """Sets the mount_target_ip of this GCPFileStoreConfig.


        :param mount_target_ip: The mount_target_ip of this GCPFileStoreConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and mount_target_ip is None:  # noqa: E501
            raise ValueError("Invalid value for `mount_target_ip`, must not be `None`")  # noqa: E501

        self._mount_target_ip = mount_target_ip

    @property
    def root_dir(self):
        """Gets the root_dir of this GCPFileStoreConfig.  # noqa: E501


        :return: The root_dir of this GCPFileStoreConfig.  # noqa: E501
        :rtype: str
        """
        return self._root_dir

    @root_dir.setter
    def root_dir(self, root_dir):
        """Sets the root_dir of this GCPFileStoreConfig.


        :param root_dir: The root_dir of this GCPFileStoreConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and root_dir is None:  # noqa: E501
            raise ValueError("Invalid value for `root_dir`, must not be `None`")  # noqa: E501

        self._root_dir = root_dir

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GCPFileStoreConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GCPFileStoreConfig):
            return True

        return self.to_dict() != other.to_dict()
