# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AicaModelConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'supported_clouds': 'list[CloudProviders]',
        'model_config': 'object',
        'model_compute_config': 'dict(str, list[object])'
    }

    attribute_map = {
        'title': 'title',
        'supported_clouds': 'supported_clouds',
        'model_config': 'model_config',
        'model_compute_config': 'model_compute_config'
    }

    def __init__(self, title=None, supported_clouds=None, model_config=None, model_compute_config=None, local_vars_configuration=None):  # noqa: E501
        """AicaModelConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._supported_clouds = None
        self._model_config = None
        self._model_compute_config = None
        self.discriminator = None

        self.title = title
        self.supported_clouds = supported_clouds
        self.model_config = model_config
        if model_compute_config is not None:
            self.model_compute_config = model_compute_config

    @property
    def title(self):
        """Gets the title of this AicaModelConfiguration.  # noqa: E501

        Model configuration title  # noqa: E501

        :return: The title of this AicaModelConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AicaModelConfiguration.

        Model configuration title  # noqa: E501

        :param title: The title of this AicaModelConfiguration.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and title is None:  # noqa: E501
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def supported_clouds(self):
        """Gets the supported_clouds of this AicaModelConfiguration.  # noqa: E501

        List of clouds that support this model configuration  # noqa: E501

        :return: The supported_clouds of this AicaModelConfiguration.  # noqa: E501
        :rtype: list[CloudProviders]
        """
        return self._supported_clouds

    @supported_clouds.setter
    def supported_clouds(self, supported_clouds):
        """Sets the supported_clouds of this AicaModelConfiguration.

        List of clouds that support this model configuration  # noqa: E501

        :param supported_clouds: The supported_clouds of this AicaModelConfiguration.  # noqa: E501
        :type: list[CloudProviders]
        """
        if self.local_vars_configuration.client_side_validation and supported_clouds is None:  # noqa: E501
            raise ValueError("Invalid value for `supported_clouds`, must not be `None`")  # noqa: E501

        self._supported_clouds = supported_clouds

    @property
    def model_config(self):
        """Gets the model_config of this AicaModelConfiguration.  # noqa: E501

        Model configuration  # noqa: E501

        :return: The model_config of this AicaModelConfiguration.  # noqa: E501
        :rtype: object
        """
        return self._model_config

    @model_config.setter
    def model_config(self, model_config):
        """Sets the model_config of this AicaModelConfiguration.

        Model configuration  # noqa: E501

        :param model_config: The model_config of this AicaModelConfiguration.  # noqa: E501
        :type: object
        """
        if self.local_vars_configuration.client_side_validation and model_config is None:  # noqa: E501
            raise ValueError("Invalid value for `model_config`, must not be `None`")  # noqa: E501

        self._model_config = model_config

    @property
    def model_compute_config(self):
        """Gets the model_compute_config of this AicaModelConfiguration.  # noqa: E501

        Compute configuration  # noqa: E501

        :return: The model_compute_config of this AicaModelConfiguration.  # noqa: E501
        :rtype: dict(str, list[object])
        """
        return self._model_compute_config

    @model_compute_config.setter
    def model_compute_config(self, model_compute_config):
        """Sets the model_compute_config of this AicaModelConfiguration.

        Compute configuration  # noqa: E501

        :param model_compute_config: The model_compute_config of this AicaModelConfiguration.  # noqa: E501
        :type: dict(str, list[object])
        """

        self._model_compute_config = model_compute_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AicaModelConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AicaModelConfiguration):
            return True

        return self.to_dict() != other.to_dict()
