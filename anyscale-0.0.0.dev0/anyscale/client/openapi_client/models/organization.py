# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Organization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'public_identifier': 'str',
        'default_cloud_id': 'str',
        'sso_config_id': 'str',
        'sso_required': 'bool',
        'is_general_platform_enabled': 'bool',
        'is_private_endpoints_enabled': 'bool',
        'is_usage_blocked': 'bool',
        'endpoints_user_id': 'str',
        'endpoints_stripe_customer_id': 'str',
        'endpoints_metronome_customer_id': 'str',
        'endpoints_is_free_credit_used_up': 'bool',
        'metronome_customer_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'public_identifier': 'public_identifier',
        'default_cloud_id': 'default_cloud_id',
        'sso_config_id': 'sso_config_id',
        'sso_required': 'sso_required',
        'is_general_platform_enabled': 'is_general_platform_enabled',
        'is_private_endpoints_enabled': 'is_private_endpoints_enabled',
        'is_usage_blocked': 'is_usage_blocked',
        'endpoints_user_id': 'endpoints_user_id',
        'endpoints_stripe_customer_id': 'endpoints_stripe_customer_id',
        'endpoints_metronome_customer_id': 'endpoints_metronome_customer_id',
        'endpoints_is_free_credit_used_up': 'endpoints_is_free_credit_used_up',
        'metronome_customer_id': 'metronome_customer_id'
    }

    def __init__(self, id=None, name=None, public_identifier=None, default_cloud_id=None, sso_config_id=None, sso_required=False, is_general_platform_enabled=None, is_private_endpoints_enabled=None, is_usage_blocked=None, endpoints_user_id=None, endpoints_stripe_customer_id=None, endpoints_metronome_customer_id=None, endpoints_is_free_credit_used_up=None, metronome_customer_id=None, local_vars_configuration=None):  # noqa: E501
        """Organization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._public_identifier = None
        self._default_cloud_id = None
        self._sso_config_id = None
        self._sso_required = None
        self._is_general_platform_enabled = None
        self._is_private_endpoints_enabled = None
        self._is_usage_blocked = None
        self._endpoints_user_id = None
        self._endpoints_stripe_customer_id = None
        self._endpoints_metronome_customer_id = None
        self._endpoints_is_free_credit_used_up = None
        self._metronome_customer_id = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.public_identifier = public_identifier
        if default_cloud_id is not None:
            self.default_cloud_id = default_cloud_id
        if sso_config_id is not None:
            self.sso_config_id = sso_config_id
        if sso_required is not None:
            self.sso_required = sso_required
        self.is_general_platform_enabled = is_general_platform_enabled
        self.is_private_endpoints_enabled = is_private_endpoints_enabled
        self.is_usage_blocked = is_usage_blocked
        if endpoints_user_id is not None:
            self.endpoints_user_id = endpoints_user_id
        if endpoints_stripe_customer_id is not None:
            self.endpoints_stripe_customer_id = endpoints_stripe_customer_id
        if endpoints_metronome_customer_id is not None:
            self.endpoints_metronome_customer_id = endpoints_metronome_customer_id
        if endpoints_is_free_credit_used_up is not None:
            self.endpoints_is_free_credit_used_up = endpoints_is_free_credit_used_up
        if metronome_customer_id is not None:
            self.metronome_customer_id = metronome_customer_id

    @property
    def id(self):
        """Gets the id of this Organization.  # noqa: E501


        :return: The id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organization.  # noqa: E501


        :return: The name of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def public_identifier(self):
        """Gets the public_identifier of this Organization.  # noqa: E501


        :return: The public_identifier of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._public_identifier

    @public_identifier.setter
    def public_identifier(self, public_identifier):
        """Sets the public_identifier of this Organization.


        :param public_identifier: The public_identifier of this Organization.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and public_identifier is None:  # noqa: E501
            raise ValueError("Invalid value for `public_identifier`, must not be `None`")  # noqa: E501

        self._public_identifier = public_identifier

    @property
    def default_cloud_id(self):
        """Gets the default_cloud_id of this Organization.  # noqa: E501


        :return: The default_cloud_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._default_cloud_id

    @default_cloud_id.setter
    def default_cloud_id(self, default_cloud_id):
        """Sets the default_cloud_id of this Organization.


        :param default_cloud_id: The default_cloud_id of this Organization.  # noqa: E501
        :type: str
        """

        self._default_cloud_id = default_cloud_id

    @property
    def sso_config_id(self):
        """Gets the sso_config_id of this Organization.  # noqa: E501


        :return: The sso_config_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._sso_config_id

    @sso_config_id.setter
    def sso_config_id(self, sso_config_id):
        """Sets the sso_config_id of this Organization.


        :param sso_config_id: The sso_config_id of this Organization.  # noqa: E501
        :type: str
        """

        self._sso_config_id = sso_config_id

    @property
    def sso_required(self):
        """Gets the sso_required of this Organization.  # noqa: E501


        :return: The sso_required of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._sso_required

    @sso_required.setter
    def sso_required(self, sso_required):
        """Sets the sso_required of this Organization.


        :param sso_required: The sso_required of this Organization.  # noqa: E501
        :type: bool
        """

        self._sso_required = sso_required

    @property
    def is_general_platform_enabled(self):
        """Gets the is_general_platform_enabled of this Organization.  # noqa: E501


        :return: The is_general_platform_enabled of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._is_general_platform_enabled

    @is_general_platform_enabled.setter
    def is_general_platform_enabled(self, is_general_platform_enabled):
        """Sets the is_general_platform_enabled of this Organization.


        :param is_general_platform_enabled: The is_general_platform_enabled of this Organization.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_general_platform_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_general_platform_enabled`, must not be `None`")  # noqa: E501

        self._is_general_platform_enabled = is_general_platform_enabled

    @property
    def is_private_endpoints_enabled(self):
        """Gets the is_private_endpoints_enabled of this Organization.  # noqa: E501


        :return: The is_private_endpoints_enabled of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_endpoints_enabled

    @is_private_endpoints_enabled.setter
    def is_private_endpoints_enabled(self, is_private_endpoints_enabled):
        """Sets the is_private_endpoints_enabled of this Organization.


        :param is_private_endpoints_enabled: The is_private_endpoints_enabled of this Organization.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_private_endpoints_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `is_private_endpoints_enabled`, must not be `None`")  # noqa: E501

        self._is_private_endpoints_enabled = is_private_endpoints_enabled

    @property
    def is_usage_blocked(self):
        """Gets the is_usage_blocked of this Organization.  # noqa: E501


        :return: The is_usage_blocked of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._is_usage_blocked

    @is_usage_blocked.setter
    def is_usage_blocked(self, is_usage_blocked):
        """Sets the is_usage_blocked of this Organization.


        :param is_usage_blocked: The is_usage_blocked of this Organization.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and is_usage_blocked is None:  # noqa: E501
            raise ValueError("Invalid value for `is_usage_blocked`, must not be `None`")  # noqa: E501

        self._is_usage_blocked = is_usage_blocked

    @property
    def endpoints_user_id(self):
        """Gets the endpoints_user_id of this Organization.  # noqa: E501


        :return: The endpoints_user_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._endpoints_user_id

    @endpoints_user_id.setter
    def endpoints_user_id(self, endpoints_user_id):
        """Sets the endpoints_user_id of this Organization.


        :param endpoints_user_id: The endpoints_user_id of this Organization.  # noqa: E501
        :type: str
        """

        self._endpoints_user_id = endpoints_user_id

    @property
    def endpoints_stripe_customer_id(self):
        """Gets the endpoints_stripe_customer_id of this Organization.  # noqa: E501


        :return: The endpoints_stripe_customer_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._endpoints_stripe_customer_id

    @endpoints_stripe_customer_id.setter
    def endpoints_stripe_customer_id(self, endpoints_stripe_customer_id):
        """Sets the endpoints_stripe_customer_id of this Organization.


        :param endpoints_stripe_customer_id: The endpoints_stripe_customer_id of this Organization.  # noqa: E501
        :type: str
        """

        self._endpoints_stripe_customer_id = endpoints_stripe_customer_id

    @property
    def endpoints_metronome_customer_id(self):
        """Gets the endpoints_metronome_customer_id of this Organization.  # noqa: E501


        :return: The endpoints_metronome_customer_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._endpoints_metronome_customer_id

    @endpoints_metronome_customer_id.setter
    def endpoints_metronome_customer_id(self, endpoints_metronome_customer_id):
        """Sets the endpoints_metronome_customer_id of this Organization.


        :param endpoints_metronome_customer_id: The endpoints_metronome_customer_id of this Organization.  # noqa: E501
        :type: str
        """

        self._endpoints_metronome_customer_id = endpoints_metronome_customer_id

    @property
    def endpoints_is_free_credit_used_up(self):
        """Gets the endpoints_is_free_credit_used_up of this Organization.  # noqa: E501


        :return: The endpoints_is_free_credit_used_up of this Organization.  # noqa: E501
        :rtype: bool
        """
        return self._endpoints_is_free_credit_used_up

    @endpoints_is_free_credit_used_up.setter
    def endpoints_is_free_credit_used_up(self, endpoints_is_free_credit_used_up):
        """Sets the endpoints_is_free_credit_used_up of this Organization.


        :param endpoints_is_free_credit_used_up: The endpoints_is_free_credit_used_up of this Organization.  # noqa: E501
        :type: bool
        """

        self._endpoints_is_free_credit_used_up = endpoints_is_free_credit_used_up

    @property
    def metronome_customer_id(self):
        """Gets the metronome_customer_id of this Organization.  # noqa: E501


        :return: The metronome_customer_id of this Organization.  # noqa: E501
        :rtype: str
        """
        return self._metronome_customer_id

    @metronome_customer_id.setter
    def metronome_customer_id(self, metronome_customer_id):
        """Sets the metronome_customer_id of this Organization.


        :param metronome_customer_id: The metronome_customer_id of this Organization.  # noqa: E501
        :type: str
        """

        self._metronome_customer_id = metronome_customer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Organization):
            return True

        return self.to_dict() != other.to_dict()
