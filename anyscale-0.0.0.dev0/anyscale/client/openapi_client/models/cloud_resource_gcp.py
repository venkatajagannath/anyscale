# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CloudResourceGCP(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gcp_vpc_id': 'str',
        'gcp_subnet_ids': 'list[str]',
        'gcp_cluster_node_service_account_email': 'str',
        'gcp_anyscale_iam_service_account_email': 'str',
        'gcp_filestore_config': 'GCPFileStoreConfig',
        'gcp_firewall_policy_ids': 'list[str]',
        'gcp_cloud_storage_bucket_id': 'str',
        'gcp_deployment_manager_id': 'str',
        'memorystore_instance_config': 'GCPMemorystoreInstanceConfig',
        'id': 'str',
        'cloud_id': 'str'
    }

    attribute_map = {
        'gcp_vpc_id': 'gcp_vpc_id',
        'gcp_subnet_ids': 'gcp_subnet_ids',
        'gcp_cluster_node_service_account_email': 'gcp_cluster_node_service_account_email',
        'gcp_anyscale_iam_service_account_email': 'gcp_anyscale_iam_service_account_email',
        'gcp_filestore_config': 'gcp_filestore_config',
        'gcp_firewall_policy_ids': 'gcp_firewall_policy_ids',
        'gcp_cloud_storage_bucket_id': 'gcp_cloud_storage_bucket_id',
        'gcp_deployment_manager_id': 'gcp_deployment_manager_id',
        'memorystore_instance_config': 'memorystore_instance_config',
        'id': 'id',
        'cloud_id': 'cloud_id'
    }

    def __init__(self, gcp_vpc_id=None, gcp_subnet_ids=None, gcp_cluster_node_service_account_email=None, gcp_anyscale_iam_service_account_email=None, gcp_filestore_config=None, gcp_firewall_policy_ids=None, gcp_cloud_storage_bucket_id=None, gcp_deployment_manager_id=None, memorystore_instance_config=None, id=None, cloud_id=None, local_vars_configuration=None):  # noqa: E501
        """CloudResourceGCP - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gcp_vpc_id = None
        self._gcp_subnet_ids = None
        self._gcp_cluster_node_service_account_email = None
        self._gcp_anyscale_iam_service_account_email = None
        self._gcp_filestore_config = None
        self._gcp_firewall_policy_ids = None
        self._gcp_cloud_storage_bucket_id = None
        self._gcp_deployment_manager_id = None
        self._memorystore_instance_config = None
        self._id = None
        self._cloud_id = None
        self.discriminator = None

        self.gcp_vpc_id = gcp_vpc_id
        self.gcp_subnet_ids = gcp_subnet_ids
        self.gcp_cluster_node_service_account_email = gcp_cluster_node_service_account_email
        self.gcp_anyscale_iam_service_account_email = gcp_anyscale_iam_service_account_email
        self.gcp_filestore_config = gcp_filestore_config
        self.gcp_firewall_policy_ids = gcp_firewall_policy_ids
        self.gcp_cloud_storage_bucket_id = gcp_cloud_storage_bucket_id
        if gcp_deployment_manager_id is not None:
            self.gcp_deployment_manager_id = gcp_deployment_manager_id
        if memorystore_instance_config is not None:
            self.memorystore_instance_config = memorystore_instance_config
        self.id = id
        self.cloud_id = cloud_id

    @property
    def gcp_vpc_id(self):
        """Gets the gcp_vpc_id of this CloudResourceGCP.  # noqa: E501

        The GCP vpc id of this cloud.  # noqa: E501

        :return: The gcp_vpc_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_vpc_id

    @gcp_vpc_id.setter
    def gcp_vpc_id(self, gcp_vpc_id):
        """Sets the gcp_vpc_id of this CloudResourceGCP.

        The GCP vpc id of this cloud.  # noqa: E501

        :param gcp_vpc_id: The gcp_vpc_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_vpc_id is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_vpc_id`, must not be `None`")  # noqa: E501

        self._gcp_vpc_id = gcp_vpc_id

    @property
    def gcp_subnet_ids(self):
        """Gets the gcp_subnet_ids of this CloudResourceGCP.  # noqa: E501

        A list of GCP subnet IDs of this cloud.  # noqa: E501

        :return: The gcp_subnet_ids of this CloudResourceGCP.  # noqa: E501
        :rtype: list[str]
        """
        return self._gcp_subnet_ids

    @gcp_subnet_ids.setter
    def gcp_subnet_ids(self, gcp_subnet_ids):
        """Sets the gcp_subnet_ids of this CloudResourceGCP.

        A list of GCP subnet IDs of this cloud.  # noqa: E501

        :param gcp_subnet_ids: The gcp_subnet_ids of this CloudResourceGCP.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and gcp_subnet_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_subnet_ids`, must not be `None`")  # noqa: E501

        self._gcp_subnet_ids = gcp_subnet_ids

    @property
    def gcp_cluster_node_service_account_email(self):
        """Gets the gcp_cluster_node_service_account_email of this CloudResourceGCP.  # noqa: E501

        The GCP service account email of this cloud.  # noqa: E501

        :return: The gcp_cluster_node_service_account_email of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_cluster_node_service_account_email

    @gcp_cluster_node_service_account_email.setter
    def gcp_cluster_node_service_account_email(self, gcp_cluster_node_service_account_email):
        """Sets the gcp_cluster_node_service_account_email of this CloudResourceGCP.

        The GCP service account email of this cloud.  # noqa: E501

        :param gcp_cluster_node_service_account_email: The gcp_cluster_node_service_account_email of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_cluster_node_service_account_email is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_cluster_node_service_account_email`, must not be `None`")  # noqa: E501

        self._gcp_cluster_node_service_account_email = gcp_cluster_node_service_account_email

    @property
    def gcp_anyscale_iam_service_account_email(self):
        """Gets the gcp_anyscale_iam_service_account_email of this CloudResourceGCP.  # noqa: E501

        The GCP service account email of this cloud.  # noqa: E501

        :return: The gcp_anyscale_iam_service_account_email of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_anyscale_iam_service_account_email

    @gcp_anyscale_iam_service_account_email.setter
    def gcp_anyscale_iam_service_account_email(self, gcp_anyscale_iam_service_account_email):
        """Sets the gcp_anyscale_iam_service_account_email of this CloudResourceGCP.

        The GCP service account email of this cloud.  # noqa: E501

        :param gcp_anyscale_iam_service_account_email: The gcp_anyscale_iam_service_account_email of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_anyscale_iam_service_account_email is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_anyscale_iam_service_account_email`, must not be `None`")  # noqa: E501

        self._gcp_anyscale_iam_service_account_email = gcp_anyscale_iam_service_account_email

    @property
    def gcp_filestore_config(self):
        """Gets the gcp_filestore_config of this CloudResourceGCP.  # noqa: E501

        The GCP filestore config of this cloud.  # noqa: E501

        :return: The gcp_filestore_config of this CloudResourceGCP.  # noqa: E501
        :rtype: GCPFileStoreConfig
        """
        return self._gcp_filestore_config

    @gcp_filestore_config.setter
    def gcp_filestore_config(self, gcp_filestore_config):
        """Sets the gcp_filestore_config of this CloudResourceGCP.

        The GCP filestore config of this cloud.  # noqa: E501

        :param gcp_filestore_config: The gcp_filestore_config of this CloudResourceGCP.  # noqa: E501
        :type: GCPFileStoreConfig
        """
        if self.local_vars_configuration.client_side_validation and gcp_filestore_config is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_filestore_config`, must not be `None`")  # noqa: E501

        self._gcp_filestore_config = gcp_filestore_config

    @property
    def gcp_firewall_policy_ids(self):
        """Gets the gcp_firewall_policy_ids of this CloudResourceGCP.  # noqa: E501

        A list of GCP firewall policy IDs of this cloud.  # noqa: E501

        :return: The gcp_firewall_policy_ids of this CloudResourceGCP.  # noqa: E501
        :rtype: list[str]
        """
        return self._gcp_firewall_policy_ids

    @gcp_firewall_policy_ids.setter
    def gcp_firewall_policy_ids(self, gcp_firewall_policy_ids):
        """Sets the gcp_firewall_policy_ids of this CloudResourceGCP.

        A list of GCP firewall policy IDs of this cloud.  # noqa: E501

        :param gcp_firewall_policy_ids: The gcp_firewall_policy_ids of this CloudResourceGCP.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and gcp_firewall_policy_ids is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_firewall_policy_ids`, must not be `None`")  # noqa: E501

        self._gcp_firewall_policy_ids = gcp_firewall_policy_ids

    @property
    def gcp_cloud_storage_bucket_id(self):
        """Gets the gcp_cloud_storage_bucket_id of this CloudResourceGCP.  # noqa: E501

        The GCP cloud storage bucket id of this cloud.  # noqa: E501

        :return: The gcp_cloud_storage_bucket_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_cloud_storage_bucket_id

    @gcp_cloud_storage_bucket_id.setter
    def gcp_cloud_storage_bucket_id(self, gcp_cloud_storage_bucket_id):
        """Sets the gcp_cloud_storage_bucket_id of this CloudResourceGCP.

        The GCP cloud storage bucket id of this cloud.  # noqa: E501

        :param gcp_cloud_storage_bucket_id: The gcp_cloud_storage_bucket_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and gcp_cloud_storage_bucket_id is None:  # noqa: E501
            raise ValueError("Invalid value for `gcp_cloud_storage_bucket_id`, must not be `None`")  # noqa: E501

        self._gcp_cloud_storage_bucket_id = gcp_cloud_storage_bucket_id

    @property
    def gcp_deployment_manager_id(self):
        """Gets the gcp_deployment_manager_id of this CloudResourceGCP.  # noqa: E501

        The GCP deployment manager id of this cloud.  # noqa: E501

        :return: The gcp_deployment_manager_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_deployment_manager_id

    @gcp_deployment_manager_id.setter
    def gcp_deployment_manager_id(self, gcp_deployment_manager_id):
        """Sets the gcp_deployment_manager_id of this CloudResourceGCP.

        The GCP deployment manager id of this cloud.  # noqa: E501

        :param gcp_deployment_manager_id: The gcp_deployment_manager_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._gcp_deployment_manager_id = gcp_deployment_manager_id

    @property
    def memorystore_instance_config(self):
        """Gets the memorystore_instance_config of this CloudResourceGCP.  # noqa: E501

        The GCP memorystore instance config of this cloud.  # noqa: E501

        :return: The memorystore_instance_config of this CloudResourceGCP.  # noqa: E501
        :rtype: GCPMemorystoreInstanceConfig
        """
        return self._memorystore_instance_config

    @memorystore_instance_config.setter
    def memorystore_instance_config(self, memorystore_instance_config):
        """Sets the memorystore_instance_config of this CloudResourceGCP.

        The GCP memorystore instance config of this cloud.  # noqa: E501

        :param memorystore_instance_config: The memorystore_instance_config of this CloudResourceGCP.  # noqa: E501
        :type: GCPMemorystoreInstanceConfig
        """

        self._memorystore_instance_config = memorystore_instance_config

    @property
    def id(self):
        """Gets the id of this CloudResourceGCP.  # noqa: E501

        Server assigned unique identifier.  # noqa: E501

        :return: The id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CloudResourceGCP.

        Server assigned unique identifier.  # noqa: E501

        :param id: The id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this CloudResourceGCP.  # noqa: E501

        The ID of the cloud that this cloud resource belongs to.  # noqa: E501

        :return: The cloud_id of this CloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this CloudResourceGCP.

        The ID of the cloud that this cloud resource belongs to.  # noqa: E501

        :param cloud_id: The cloud_id of this CloudResourceGCP.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CloudResourceGCP):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CloudResourceGCP):
            return True

        return self.to_dict() != other.to_dict()
