# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UtmFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'utm_source': 'str',
        'utm_campaign': 'str',
        'utm_content': 'str',
        'utm_medium': 'str',
        'referrer_url': 'str'
    }

    attribute_map = {
        'utm_source': 'utm_source',
        'utm_campaign': 'utm_campaign',
        'utm_content': 'utm_content',
        'utm_medium': 'utm_medium',
        'referrer_url': 'referrer_url'
    }

    def __init__(self, utm_source=None, utm_campaign=None, utm_content=None, utm_medium=None, referrer_url=None, local_vars_configuration=None):  # noqa: E501
        """UtmFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._utm_source = None
        self._utm_campaign = None
        self._utm_content = None
        self._utm_medium = None
        self._referrer_url = None
        self.discriminator = None

        if utm_source is not None:
            self.utm_source = utm_source
        if utm_campaign is not None:
            self.utm_campaign = utm_campaign
        if utm_content is not None:
            self.utm_content = utm_content
        if utm_medium is not None:
            self.utm_medium = utm_medium
        if referrer_url is not None:
            self.referrer_url = referrer_url

    @property
    def utm_source(self):
        """Gets the utm_source of this UtmFields.  # noqa: E501


        :return: The utm_source of this UtmFields.  # noqa: E501
        :rtype: str
        """
        return self._utm_source

    @utm_source.setter
    def utm_source(self, utm_source):
        """Sets the utm_source of this UtmFields.


        :param utm_source: The utm_source of this UtmFields.  # noqa: E501
        :type: str
        """

        self._utm_source = utm_source

    @property
    def utm_campaign(self):
        """Gets the utm_campaign of this UtmFields.  # noqa: E501


        :return: The utm_campaign of this UtmFields.  # noqa: E501
        :rtype: str
        """
        return self._utm_campaign

    @utm_campaign.setter
    def utm_campaign(self, utm_campaign):
        """Sets the utm_campaign of this UtmFields.


        :param utm_campaign: The utm_campaign of this UtmFields.  # noqa: E501
        :type: str
        """

        self._utm_campaign = utm_campaign

    @property
    def utm_content(self):
        """Gets the utm_content of this UtmFields.  # noqa: E501


        :return: The utm_content of this UtmFields.  # noqa: E501
        :rtype: str
        """
        return self._utm_content

    @utm_content.setter
    def utm_content(self, utm_content):
        """Sets the utm_content of this UtmFields.


        :param utm_content: The utm_content of this UtmFields.  # noqa: E501
        :type: str
        """

        self._utm_content = utm_content

    @property
    def utm_medium(self):
        """Gets the utm_medium of this UtmFields.  # noqa: E501


        :return: The utm_medium of this UtmFields.  # noqa: E501
        :rtype: str
        """
        return self._utm_medium

    @utm_medium.setter
    def utm_medium(self, utm_medium):
        """Sets the utm_medium of this UtmFields.


        :param utm_medium: The utm_medium of this UtmFields.  # noqa: E501
        :type: str
        """

        self._utm_medium = utm_medium

    @property
    def referrer_url(self):
        """Gets the referrer_url of this UtmFields.  # noqa: E501


        :return: The referrer_url of this UtmFields.  # noqa: E501
        :rtype: str
        """
        return self._referrer_url

    @referrer_url.setter
    def referrer_url(self, referrer_url):
        """Sets the referrer_url of this UtmFields.


        :param referrer_url: The referrer_url of this UtmFields.  # noqa: E501
        :type: str
        """

        self._referrer_url = referrer_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtmFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UtmFields):
            return True

        return self.to_dict() != other.to_dict()
