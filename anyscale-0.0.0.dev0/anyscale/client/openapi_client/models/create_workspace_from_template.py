# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateWorkspaceFromTemplate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'template_id': 'str',
        'cloud_id': 'str',
        'project_id': 'str',
        'skip_start': 'bool',
        'name': 'str',
        'maximum_uptime_minutes': 'int'
    }

    attribute_map = {
        'template_id': 'template_id',
        'cloud_id': 'cloud_id',
        'project_id': 'project_id',
        'skip_start': 'skip_start',
        'name': 'name',
        'maximum_uptime_minutes': 'maximum_uptime_minutes'
    }

    def __init__(self, template_id=None, cloud_id=None, project_id=None, skip_start=None, name=None, maximum_uptime_minutes=None, local_vars_configuration=None):  # noqa: E501
        """CreateWorkspaceFromTemplate - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._template_id = None
        self._cloud_id = None
        self._project_id = None
        self._skip_start = None
        self._name = None
        self._maximum_uptime_minutes = None
        self.discriminator = None

        self.template_id = template_id
        if cloud_id is not None:
            self.cloud_id = cloud_id
        if project_id is not None:
            self.project_id = project_id
        if skip_start is not None:
            self.skip_start = skip_start
        if name is not None:
            self.name = name
        if maximum_uptime_minutes is not None:
            self.maximum_uptime_minutes = maximum_uptime_minutes

    @property
    def template_id(self):
        """Gets the template_id of this CreateWorkspaceFromTemplate.  # noqa: E501

        The Id of the template to use.  # noqa: E501

        :return: The template_id of this CreateWorkspaceFromTemplate.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this CreateWorkspaceFromTemplate.

        The Id of the template to use.  # noqa: E501

        :param template_id: The template_id of this CreateWorkspaceFromTemplate.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and template_id is None:  # noqa: E501
            raise ValueError("Invalid value for `template_id`, must not be `None`")  # noqa: E501

        self._template_id = template_id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this CreateWorkspaceFromTemplate.  # noqa: E501

        The cloud id for the workspace.  # noqa: E501

        :return: The cloud_id of this CreateWorkspaceFromTemplate.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this CreateWorkspaceFromTemplate.

        The cloud id for the workspace.  # noqa: E501

        :param cloud_id: The cloud_id of this CreateWorkspaceFromTemplate.  # noqa: E501
        :type: str
        """

        self._cloud_id = cloud_id

    @property
    def project_id(self):
        """Gets the project_id of this CreateWorkspaceFromTemplate.  # noqa: E501

        Id of the project that this workspace belongs to.  # noqa: E501

        :return: The project_id of this CreateWorkspaceFromTemplate.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CreateWorkspaceFromTemplate.

        Id of the project that this workspace belongs to.  # noqa: E501

        :param project_id: The project_id of this CreateWorkspaceFromTemplate.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def skip_start(self):
        """Gets the skip_start of this CreateWorkspaceFromTemplate.  # noqa: E501

        Skip start the workspace on creation.  # noqa: E501

        :return: The skip_start of this CreateWorkspaceFromTemplate.  # noqa: E501
        :rtype: bool
        """
        return self._skip_start

    @skip_start.setter
    def skip_start(self, skip_start):
        """Sets the skip_start of this CreateWorkspaceFromTemplate.

        Skip start the workspace on creation.  # noqa: E501

        :param skip_start: The skip_start of this CreateWorkspaceFromTemplate.  # noqa: E501
        :type: bool
        """

        self._skip_start = skip_start

    @property
    def name(self):
        """Gets the name of this CreateWorkspaceFromTemplate.  # noqa: E501

        The name of the workspace.  # noqa: E501

        :return: The name of this CreateWorkspaceFromTemplate.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateWorkspaceFromTemplate.

        The name of the workspace.  # noqa: E501

        :param name: The name of this CreateWorkspaceFromTemplate.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def maximum_uptime_minutes(self):
        """Gets the maximum_uptime_minutes of this CreateWorkspaceFromTemplate.  # noqa: E501

        The maximum uptime of the workspace in minutes. The workspace will force terminate after this time.  # noqa: E501

        :return: The maximum_uptime_minutes of this CreateWorkspaceFromTemplate.  # noqa: E501
        :rtype: int
        """
        return self._maximum_uptime_minutes

    @maximum_uptime_minutes.setter
    def maximum_uptime_minutes(self, maximum_uptime_minutes):
        """Sets the maximum_uptime_minutes of this CreateWorkspaceFromTemplate.

        The maximum uptime of the workspace in minutes. The workspace will force terminate after this time.  # noqa: E501

        :param maximum_uptime_minutes: The maximum_uptime_minutes of this CreateWorkspaceFromTemplate.  # noqa: E501
        :type: int
        """

        self._maximum_uptime_minutes = maximum_uptime_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateWorkspaceFromTemplate):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateWorkspaceFromTemplate):
            return True

        return self.to_dict() != other.to_dict()
