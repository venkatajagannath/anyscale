# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ExternalTerminalCommand(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scid': 'str',
        'command': 'str',
        'created_at': 'datetime',
        'finished_at': 'datetime',
        'status_code': 'int',
        'type': 'SessionCommandTypes',
        'web_terminal_tab_id': 'str'
    }

    attribute_map = {
        'scid': 'scid',
        'command': 'command',
        'created_at': 'created_at',
        'finished_at': 'finished_at',
        'status_code': 'status_code',
        'type': 'type',
        'web_terminal_tab_id': 'web_terminal_tab_id'
    }

    def __init__(self, scid=None, command=None, created_at=None, finished_at=None, status_code=None, type=None, web_terminal_tab_id=None, local_vars_configuration=None):  # noqa: E501
        """ExternalTerminalCommand - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._scid = None
        self._command = None
        self._created_at = None
        self._finished_at = None
        self._status_code = None
        self._type = None
        self._web_terminal_tab_id = None
        self.discriminator = None

        self.scid = scid
        self.command = command
        self.created_at = created_at
        if finished_at is not None:
            self.finished_at = finished_at
        if status_code is not None:
            self.status_code = status_code
        self.type = type
        if web_terminal_tab_id is not None:
            self.web_terminal_tab_id = web_terminal_tab_id

    @property
    def scid(self):
        """Gets the scid of this ExternalTerminalCommand.  # noqa: E501


        :return: The scid of this ExternalTerminalCommand.  # noqa: E501
        :rtype: str
        """
        return self._scid

    @scid.setter
    def scid(self, scid):
        """Sets the scid of this ExternalTerminalCommand.


        :param scid: The scid of this ExternalTerminalCommand.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and scid is None:  # noqa: E501
            raise ValueError("Invalid value for `scid`, must not be `None`")  # noqa: E501

        self._scid = scid

    @property
    def command(self):
        """Gets the command of this ExternalTerminalCommand.  # noqa: E501


        :return: The command of this ExternalTerminalCommand.  # noqa: E501
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ExternalTerminalCommand.


        :param command: The command of this ExternalTerminalCommand.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and command is None:  # noqa: E501
            raise ValueError("Invalid value for `command`, must not be `None`")  # noqa: E501

        self._command = command

    @property
    def created_at(self):
        """Gets the created_at of this ExternalTerminalCommand.  # noqa: E501


        :return: The created_at of this ExternalTerminalCommand.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExternalTerminalCommand.


        :param created_at: The created_at of this ExternalTerminalCommand.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this ExternalTerminalCommand.  # noqa: E501


        :return: The finished_at of this ExternalTerminalCommand.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this ExternalTerminalCommand.


        :param finished_at: The finished_at of this ExternalTerminalCommand.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def status_code(self):
        """Gets the status_code of this ExternalTerminalCommand.  # noqa: E501


        :return: The status_code of this ExternalTerminalCommand.  # noqa: E501
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this ExternalTerminalCommand.


        :param status_code: The status_code of this ExternalTerminalCommand.  # noqa: E501
        :type: int
        """

        self._status_code = status_code

    @property
    def type(self):
        """Gets the type of this ExternalTerminalCommand.  # noqa: E501


        :return: The type of this ExternalTerminalCommand.  # noqa: E501
        :rtype: SessionCommandTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ExternalTerminalCommand.


        :param type: The type of this ExternalTerminalCommand.  # noqa: E501
        :type: SessionCommandTypes
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def web_terminal_tab_id(self):
        """Gets the web_terminal_tab_id of this ExternalTerminalCommand.  # noqa: E501


        :return: The web_terminal_tab_id of this ExternalTerminalCommand.  # noqa: E501
        :rtype: str
        """
        return self._web_terminal_tab_id

    @web_terminal_tab_id.setter
    def web_terminal_tab_id(self, web_terminal_tab_id):
        """Sets the web_terminal_tab_id of this ExternalTerminalCommand.


        :param web_terminal_tab_id: The web_terminal_tab_id of this ExternalTerminalCommand.  # noqa: E501
        :type: str
        """

        self._web_terminal_tab_id = web_terminal_tab_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExternalTerminalCommand):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExternalTerminalCommand):
            return True

        return self.to_dict() != other.to_dict()
