# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class AnyscaleServiceAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'name': 'str',
        'organization_id': 'str',
        'email': 'str',
        'permission_level': 'OrganizationPermissionLevel',
        'created_at': 'datetime'
    }

    attribute_map = {
        'user_id': 'user_id',
        'name': 'name',
        'organization_id': 'organization_id',
        'email': 'email',
        'permission_level': 'permission_level',
        'created_at': 'created_at'
    }

    def __init__(self, user_id=None, name=None, organization_id=None, email=None, permission_level=None, created_at=None, local_vars_configuration=None):  # noqa: E501
        """AnyscaleServiceAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._name = None
        self._organization_id = None
        self._email = None
        self._permission_level = None
        self._created_at = None
        self.discriminator = None

        self.user_id = user_id
        self.name = name
        self.organization_id = organization_id
        self.email = email
        self.permission_level = permission_level
        self.created_at = created_at

    @property
    def user_id(self):
        """Gets the user_id of this AnyscaleServiceAccount.  # noqa: E501


        :return: The user_id of this AnyscaleServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AnyscaleServiceAccount.


        :param user_id: The user_id of this AnyscaleServiceAccount.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and user_id is None:  # noqa: E501
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def name(self):
        """Gets the name of this AnyscaleServiceAccount.  # noqa: E501


        :return: The name of this AnyscaleServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnyscaleServiceAccount.


        :param name: The name of this AnyscaleServiceAccount.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this AnyscaleServiceAccount.  # noqa: E501


        :return: The organization_id of this AnyscaleServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this AnyscaleServiceAccount.


        :param organization_id: The organization_id of this AnyscaleServiceAccount.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and organization_id is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def email(self):
        """Gets the email of this AnyscaleServiceAccount.  # noqa: E501


        :return: The email of this AnyscaleServiceAccount.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this AnyscaleServiceAccount.


        :param email: The email of this AnyscaleServiceAccount.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def permission_level(self):
        """Gets the permission_level of this AnyscaleServiceAccount.  # noqa: E501


        :return: The permission_level of this AnyscaleServiceAccount.  # noqa: E501
        :rtype: OrganizationPermissionLevel
        """
        return self._permission_level

    @permission_level.setter
    def permission_level(self, permission_level):
        """Sets the permission_level of this AnyscaleServiceAccount.


        :param permission_level: The permission_level of this AnyscaleServiceAccount.  # noqa: E501
        :type: OrganizationPermissionLevel
        """
        if self.local_vars_configuration.client_side_validation and permission_level is None:  # noqa: E501
            raise ValueError("Invalid value for `permission_level`, must not be `None`")  # noqa: E501

        self._permission_level = permission_level

    @property
    def created_at(self):
        """Gets the created_at of this AnyscaleServiceAccount.  # noqa: E501


        :return: The created_at of this AnyscaleServiceAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this AnyscaleServiceAccount.


        :param created_at: The created_at of this AnyscaleServiceAccount.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnyscaleServiceAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AnyscaleServiceAccount):
            return True

        return self.to_dict() != other.to_dict()
