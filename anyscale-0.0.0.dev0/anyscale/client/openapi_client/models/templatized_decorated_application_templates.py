# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TemplatizedDecoratedApplicationTemplates(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cpu_optimized': 'DecoratedApplicationTemplate',
        'gpu_optimized': 'DecoratedApplicationTemplate',
        'memory_optimized': 'DecoratedApplicationTemplate',
        'default': 'DecoratedApplicationTemplate'
    }

    attribute_map = {
        'cpu_optimized': 'cpu_optimized',
        'gpu_optimized': 'gpu_optimized',
        'memory_optimized': 'memory_optimized',
        'default': 'default'
    }

    def __init__(self, cpu_optimized=None, gpu_optimized=None, memory_optimized=None, default=None, local_vars_configuration=None):  # noqa: E501
        """TemplatizedDecoratedApplicationTemplates - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cpu_optimized = None
        self._gpu_optimized = None
        self._memory_optimized = None
        self._default = None
        self.discriminator = None

        self.cpu_optimized = cpu_optimized
        self.gpu_optimized = gpu_optimized
        self.memory_optimized = memory_optimized
        self.default = default

    @property
    def cpu_optimized(self):
        """Gets the cpu_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501


        :return: The cpu_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :rtype: DecoratedApplicationTemplate
        """
        return self._cpu_optimized

    @cpu_optimized.setter
    def cpu_optimized(self, cpu_optimized):
        """Sets the cpu_optimized of this TemplatizedDecoratedApplicationTemplates.


        :param cpu_optimized: The cpu_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :type: DecoratedApplicationTemplate
        """
        if self.local_vars_configuration.client_side_validation and cpu_optimized is None:  # noqa: E501
            raise ValueError("Invalid value for `cpu_optimized`, must not be `None`")  # noqa: E501

        self._cpu_optimized = cpu_optimized

    @property
    def gpu_optimized(self):
        """Gets the gpu_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501


        :return: The gpu_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :rtype: DecoratedApplicationTemplate
        """
        return self._gpu_optimized

    @gpu_optimized.setter
    def gpu_optimized(self, gpu_optimized):
        """Sets the gpu_optimized of this TemplatizedDecoratedApplicationTemplates.


        :param gpu_optimized: The gpu_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :type: DecoratedApplicationTemplate
        """
        if self.local_vars_configuration.client_side_validation and gpu_optimized is None:  # noqa: E501
            raise ValueError("Invalid value for `gpu_optimized`, must not be `None`")  # noqa: E501

        self._gpu_optimized = gpu_optimized

    @property
    def memory_optimized(self):
        """Gets the memory_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501


        :return: The memory_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :rtype: DecoratedApplicationTemplate
        """
        return self._memory_optimized

    @memory_optimized.setter
    def memory_optimized(self, memory_optimized):
        """Sets the memory_optimized of this TemplatizedDecoratedApplicationTemplates.


        :param memory_optimized: The memory_optimized of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :type: DecoratedApplicationTemplate
        """
        if self.local_vars_configuration.client_side_validation and memory_optimized is None:  # noqa: E501
            raise ValueError("Invalid value for `memory_optimized`, must not be `None`")  # noqa: E501

        self._memory_optimized = memory_optimized

    @property
    def default(self):
        """Gets the default of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501


        :return: The default of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :rtype: DecoratedApplicationTemplate
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this TemplatizedDecoratedApplicationTemplates.


        :param default: The default of this TemplatizedDecoratedApplicationTemplates.  # noqa: E501
        :type: DecoratedApplicationTemplate
        """
        if self.local_vars_configuration.client_side_validation and default is None:  # noqa: E501
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplatizedDecoratedApplicationTemplates):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TemplatizedDecoratedApplicationTemplates):
            return True

        return self.to_dict() != other.to_dict()
