# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class DecoratedListServiceAPIModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'project_id': 'str',
        'cloud_id': 'str',
        'creator_id': 'str',
        'created_at': 'datetime',
        'hostname': 'str',
        'current_state': 'ServiceEventCurrentState',
        'goal_state': 'ServiceGoalStates',
        'auth_token': 'str',
        'auto_rollout_enabled': 'bool',
        'versions': 'list[DecoratedProductionServiceV2VersionAPIModel]',
        'primary_version': 'DecoratedProductionServiceV2VersionAPIModel',
        'canary_version': 'DecoratedProductionServiceV2VersionAPIModel',
        'service_observability_urls': 'ServiceObservabilityUrls',
        'base_url': 'str',
        'ended_at': 'datetime',
        'creator': 'MiniUser',
        'type': 'ServiceType'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'project_id': 'project_id',
        'cloud_id': 'cloud_id',
        'creator_id': 'creator_id',
        'created_at': 'created_at',
        'hostname': 'hostname',
        'current_state': 'current_state',
        'goal_state': 'goal_state',
        'auth_token': 'auth_token',
        'auto_rollout_enabled': 'auto_rollout_enabled',
        'versions': 'versions',
        'primary_version': 'primary_version',
        'canary_version': 'canary_version',
        'service_observability_urls': 'service_observability_urls',
        'base_url': 'base_url',
        'ended_at': 'ended_at',
        'creator': 'creator',
        'type': 'type'
    }

    def __init__(self, id=None, name=None, description=None, project_id=None, cloud_id=None, creator_id=None, created_at=None, hostname=None, current_state=None, goal_state=None, auth_token=None, auto_rollout_enabled=None, versions=None, primary_version=None, canary_version=None, service_observability_urls=None, base_url=None, ended_at=None, creator=None, type=None, local_vars_configuration=None):  # noqa: E501
        """DecoratedListServiceAPIModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._description = None
        self._project_id = None
        self._cloud_id = None
        self._creator_id = None
        self._created_at = None
        self._hostname = None
        self._current_state = None
        self._goal_state = None
        self._auth_token = None
        self._auto_rollout_enabled = None
        self._versions = None
        self._primary_version = None
        self._canary_version = None
        self._service_observability_urls = None
        self._base_url = None
        self._ended_at = None
        self._creator = None
        self._type = None
        self.discriminator = None

        self.id = id
        self.name = name
        if description is not None:
            self.description = description
        self.project_id = project_id
        self.cloud_id = cloud_id
        self.creator_id = creator_id
        self.created_at = created_at
        self.hostname = hostname
        self.current_state = current_state
        self.goal_state = goal_state
        if auth_token is not None:
            self.auth_token = auth_token
        self.auto_rollout_enabled = auto_rollout_enabled
        self.versions = versions
        self.primary_version = primary_version
        if canary_version is not None:
            self.canary_version = canary_version
        self.service_observability_urls = service_observability_urls
        self.base_url = base_url
        if ended_at is not None:
            self.ended_at = ended_at
        self.creator = creator
        self.type = type

    @property
    def id(self):
        """Gets the id of this DecoratedListServiceAPIModel.  # noqa: E501

        Id of the Service  # noqa: E501

        :return: The id of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DecoratedListServiceAPIModel.

        Id of the Service  # noqa: E501

        :param id: The id of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DecoratedListServiceAPIModel.  # noqa: E501

        Name of the Service  # noqa: E501

        :return: The name of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DecoratedListServiceAPIModel.

        Name of the Service  # noqa: E501

        :param name: The name of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this DecoratedListServiceAPIModel.  # noqa: E501

        Description of the Service  # noqa: E501

        :return: The description of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DecoratedListServiceAPIModel.

        Description of the Service  # noqa: E501

        :param description: The description of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def project_id(self):
        """Gets the project_id of this DecoratedListServiceAPIModel.  # noqa: E501

        Id of the project this Service will start clusters in. This configuration cannot be changed after the service is created.  # noqa: E501

        :return: The project_id of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DecoratedListServiceAPIModel.

        Id of the project this Service will start clusters in. This configuration cannot be changed after the service is created.  # noqa: E501

        :param project_id: The project_id of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this DecoratedListServiceAPIModel.  # noqa: E501

        Id of the cloud this Service belongs to, and will launch clusters in. This configuration cannot be changed.  # noqa: E501

        :return: The cloud_id of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this DecoratedListServiceAPIModel.

        Id of the cloud this Service belongs to, and will launch clusters in. This configuration cannot be changed.  # noqa: E501

        :param cloud_id: The cloud_id of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    @property
    def creator_id(self):
        """Gets the creator_id of this DecoratedListServiceAPIModel.  # noqa: E501

        Id of the user who created the Service  # noqa: E501

        :return: The creator_id of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this DecoratedListServiceAPIModel.

        Id of the user who created the Service  # noqa: E501

        :param creator_id: The creator_id of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creator_id is None:  # noqa: E501
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def created_at(self):
        """Gets the created_at of this DecoratedListServiceAPIModel.  # noqa: E501

        Time the Service was created  # noqa: E501

        :return: The created_at of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DecoratedListServiceAPIModel.

        Time the Service was created  # noqa: E501

        :param created_at: The created_at of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def hostname(self):
        """Gets the hostname of this DecoratedListServiceAPIModel.  # noqa: E501

        The hostname of the service  # noqa: E501

        :return: The hostname of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname):
        """Sets the hostname of this DecoratedListServiceAPIModel.

        The hostname of the service  # noqa: E501

        :param hostname: The hostname of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and hostname is None:  # noqa: E501
            raise ValueError("Invalid value for `hostname`, must not be `None`")  # noqa: E501

        self._hostname = hostname

    @property
    def current_state(self):
        """Gets the current_state of this DecoratedListServiceAPIModel.  # noqa: E501

        The current state of this service  # noqa: E501

        :return: The current_state of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: ServiceEventCurrentState
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this DecoratedListServiceAPIModel.

        The current state of this service  # noqa: E501

        :param current_state: The current_state of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: ServiceEventCurrentState
        """
        if self.local_vars_configuration.client_side_validation and current_state is None:  # noqa: E501
            raise ValueError("Invalid value for `current_state`, must not be `None`")  # noqa: E501

        self._current_state = current_state

    @property
    def goal_state(self):
        """Gets the goal_state of this DecoratedListServiceAPIModel.  # noqa: E501

        The goal state of this service  # noqa: E501

        :return: The goal_state of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: ServiceGoalStates
        """
        return self._goal_state

    @goal_state.setter
    def goal_state(self, goal_state):
        """Sets the goal_state of this DecoratedListServiceAPIModel.

        The goal state of this service  # noqa: E501

        :param goal_state: The goal_state of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: ServiceGoalStates
        """
        if self.local_vars_configuration.client_side_validation and goal_state is None:  # noqa: E501
            raise ValueError("Invalid value for `goal_state`, must not be `None`")  # noqa: E501

        self._goal_state = goal_state

    @property
    def auth_token(self):
        """Gets the auth_token of this DecoratedListServiceAPIModel.  # noqa: E501

        Token to use for service auth. To use the token, add it as a header with the key 'Authorization' and the value 'Bearer <token>'  # noqa: E501

        :return: The auth_token of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this DecoratedListServiceAPIModel.

        Token to use for service auth. To use the token, add it as a header with the key 'Authorization' and the value 'Bearer <token>'  # noqa: E501

        :param auth_token: The auth_token of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """

        self._auth_token = auth_token

    @property
    def auto_rollout_enabled(self):
        """Gets the auto_rollout_enabled of this DecoratedListServiceAPIModel.  # noqa: E501

        Whether or not the service is using auto rollout  # noqa: E501

        :return: The auto_rollout_enabled of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: bool
        """
        return self._auto_rollout_enabled

    @auto_rollout_enabled.setter
    def auto_rollout_enabled(self, auto_rollout_enabled):
        """Sets the auto_rollout_enabled of this DecoratedListServiceAPIModel.

        Whether or not the service is using auto rollout  # noqa: E501

        :param auto_rollout_enabled: The auto_rollout_enabled of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: bool
        """
        if self.local_vars_configuration.client_side_validation and auto_rollout_enabled is None:  # noqa: E501
            raise ValueError("Invalid value for `auto_rollout_enabled`, must not be `None`")  # noqa: E501

        self._auto_rollout_enabled = auto_rollout_enabled

    @property
    def versions(self):
        """Gets the versions of this DecoratedListServiceAPIModel.  # noqa: E501

        DEPRECATED. Please use `primary_version` and `canary_version` fields. Active versions of this service, sorted by creation time in ascending order.  # noqa: E501

        :return: The versions of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: list[DecoratedProductionServiceV2VersionAPIModel]
        """
        return self._versions

    @versions.setter
    def versions(self, versions):
        """Sets the versions of this DecoratedListServiceAPIModel.

        DEPRECATED. Please use `primary_version` and `canary_version` fields. Active versions of this service, sorted by creation time in ascending order.  # noqa: E501

        :param versions: The versions of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: list[DecoratedProductionServiceV2VersionAPIModel]
        """
        if self.local_vars_configuration.client_side_validation and versions is None:  # noqa: E501
            raise ValueError("Invalid value for `versions`, must not be `None`")  # noqa: E501

        self._versions = versions

    @property
    def primary_version(self):
        """Gets the primary_version of this DecoratedListServiceAPIModel.  # noqa: E501

        Primary version of this service. If the service is terminated, this field refers to the most recently active version.  # noqa: E501

        :return: The primary_version of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: DecoratedProductionServiceV2VersionAPIModel
        """
        return self._primary_version

    @primary_version.setter
    def primary_version(self, primary_version):
        """Sets the primary_version of this DecoratedListServiceAPIModel.

        Primary version of this service. If the service is terminated, this field refers to the most recently active version.  # noqa: E501

        :param primary_version: The primary_version of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: DecoratedProductionServiceV2VersionAPIModel
        """
        if self.local_vars_configuration.client_side_validation and primary_version is None:  # noqa: E501
            raise ValueError("Invalid value for `primary_version`, must not be `None`")  # noqa: E501

        self._primary_version = primary_version

    @property
    def canary_version(self):
        """Gets the canary_version of this DecoratedListServiceAPIModel.  # noqa: E501

        Canary version of this service. Present only if the service is in the `ROLLING_OUT` state.  # noqa: E501

        :return: The canary_version of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: DecoratedProductionServiceV2VersionAPIModel
        """
        return self._canary_version

    @canary_version.setter
    def canary_version(self, canary_version):
        """Sets the canary_version of this DecoratedListServiceAPIModel.

        Canary version of this service. Present only if the service is in the `ROLLING_OUT` state.  # noqa: E501

        :param canary_version: The canary_version of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: DecoratedProductionServiceV2VersionAPIModel
        """

        self._canary_version = canary_version

    @property
    def service_observability_urls(self):
        """Gets the service_observability_urls of this DecoratedListServiceAPIModel.  # noqa: E501

        A JSON object with useful urls pointing to Grafana dashboards.  # noqa: E501

        :return: The service_observability_urls of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: ServiceObservabilityUrls
        """
        return self._service_observability_urls

    @service_observability_urls.setter
    def service_observability_urls(self, service_observability_urls):
        """Sets the service_observability_urls of this DecoratedListServiceAPIModel.

        A JSON object with useful urls pointing to Grafana dashboards.  # noqa: E501

        :param service_observability_urls: The service_observability_urls of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: ServiceObservabilityUrls
        """
        if self.local_vars_configuration.client_side_validation and service_observability_urls is None:  # noqa: E501
            raise ValueError("Invalid value for `service_observability_urls`, must not be `None`")  # noqa: E501

        self._service_observability_urls = service_observability_urls

    @property
    def base_url(self):
        """Gets the base_url of this DecoratedListServiceAPIModel.  # noqa: E501

        The base url of this service  # noqa: E501

        :return: The base_url of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: str
        """
        return self._base_url

    @base_url.setter
    def base_url(self, base_url):
        """Sets the base_url of this DecoratedListServiceAPIModel.

        The base url of this service  # noqa: E501

        :param base_url: The base_url of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and base_url is None:  # noqa: E501
            raise ValueError("Invalid value for `base_url`, must not be `None`")  # noqa: E501

        self._base_url = base_url

    @property
    def ended_at(self):
        """Gets the ended_at of this DecoratedListServiceAPIModel.  # noqa: E501

        Time the Service was terminated  # noqa: E501

        :return: The ended_at of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this DecoratedListServiceAPIModel.

        Time the Service was terminated  # noqa: E501

        :param ended_at: The ended_at of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    @property
    def creator(self):
        """Gets the creator of this DecoratedListServiceAPIModel.  # noqa: E501

        The creator of this service  # noqa: E501

        :return: The creator of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: MiniUser
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this DecoratedListServiceAPIModel.

        The creator of this service  # noqa: E501

        :param creator: The creator of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: MiniUser
        """
        if self.local_vars_configuration.client_side_validation and creator is None:  # noqa: E501
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def type(self):
        """Gets the type of this DecoratedListServiceAPIModel.  # noqa: E501

        Type of the Service  # noqa: E501

        :return: The type of this DecoratedListServiceAPIModel.  # noqa: E501
        :rtype: ServiceType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DecoratedListServiceAPIModel.

        Type of the Service  # noqa: E501

        :param type: The type of this DecoratedListServiceAPIModel.  # noqa: E501
        :type: ServiceType
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecoratedListServiceAPIModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DecoratedListServiceAPIModel):
            return True

        return self.to_dict() != other.to_dict()
