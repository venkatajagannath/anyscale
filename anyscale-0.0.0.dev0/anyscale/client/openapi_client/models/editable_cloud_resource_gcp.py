# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class EditableCloudResourceGCP(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'gcp_filestore_config': 'GCPFileStoreConfig',
        'gcp_cloud_storage_bucket_id': 'str',
        'memorystore_instance_config': 'GCPMemorystoreInstanceConfig'
    }

    attribute_map = {
        'gcp_filestore_config': 'gcp_filestore_config',
        'gcp_cloud_storage_bucket_id': 'gcp_cloud_storage_bucket_id',
        'memorystore_instance_config': 'memorystore_instance_config'
    }

    def __init__(self, gcp_filestore_config=None, gcp_cloud_storage_bucket_id=None, memorystore_instance_config=None, local_vars_configuration=None):  # noqa: E501
        """EditableCloudResourceGCP - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._gcp_filestore_config = None
        self._gcp_cloud_storage_bucket_id = None
        self._memorystore_instance_config = None
        self.discriminator = None

        if gcp_filestore_config is not None:
            self.gcp_filestore_config = gcp_filestore_config
        if gcp_cloud_storage_bucket_id is not None:
            self.gcp_cloud_storage_bucket_id = gcp_cloud_storage_bucket_id
        if memorystore_instance_config is not None:
            self.memorystore_instance_config = memorystore_instance_config

    @property
    def gcp_filestore_config(self):
        """Gets the gcp_filestore_config of this EditableCloudResourceGCP.  # noqa: E501

        The GCP filestore config of this cloud.  # noqa: E501

        :return: The gcp_filestore_config of this EditableCloudResourceGCP.  # noqa: E501
        :rtype: GCPFileStoreConfig
        """
        return self._gcp_filestore_config

    @gcp_filestore_config.setter
    def gcp_filestore_config(self, gcp_filestore_config):
        """Sets the gcp_filestore_config of this EditableCloudResourceGCP.

        The GCP filestore config of this cloud.  # noqa: E501

        :param gcp_filestore_config: The gcp_filestore_config of this EditableCloudResourceGCP.  # noqa: E501
        :type: GCPFileStoreConfig
        """

        self._gcp_filestore_config = gcp_filestore_config

    @property
    def gcp_cloud_storage_bucket_id(self):
        """Gets the gcp_cloud_storage_bucket_id of this EditableCloudResourceGCP.  # noqa: E501

        The GCP cloud storage bucket id of this cloud.  # noqa: E501

        :return: The gcp_cloud_storage_bucket_id of this EditableCloudResourceGCP.  # noqa: E501
        :rtype: str
        """
        return self._gcp_cloud_storage_bucket_id

    @gcp_cloud_storage_bucket_id.setter
    def gcp_cloud_storage_bucket_id(self, gcp_cloud_storage_bucket_id):
        """Sets the gcp_cloud_storage_bucket_id of this EditableCloudResourceGCP.

        The GCP cloud storage bucket id of this cloud.  # noqa: E501

        :param gcp_cloud_storage_bucket_id: The gcp_cloud_storage_bucket_id of this EditableCloudResourceGCP.  # noqa: E501
        :type: str
        """

        self._gcp_cloud_storage_bucket_id = gcp_cloud_storage_bucket_id

    @property
    def memorystore_instance_config(self):
        """Gets the memorystore_instance_config of this EditableCloudResourceGCP.  # noqa: E501

        The GCP memorystore instance config of this cloud.  # noqa: E501

        :return: The memorystore_instance_config of this EditableCloudResourceGCP.  # noqa: E501
        :rtype: GCPMemorystoreInstanceConfig
        """
        return self._memorystore_instance_config

    @memorystore_instance_config.setter
    def memorystore_instance_config(self, memorystore_instance_config):
        """Sets the memorystore_instance_config of this EditableCloudResourceGCP.

        The GCP memorystore instance config of this cloud.  # noqa: E501

        :param memorystore_instance_config: The memorystore_instance_config of this EditableCloudResourceGCP.  # noqa: E501
        :type: GCPMemorystoreInstanceConfig
        """

        self._memorystore_instance_config = memorystore_instance_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EditableCloudResourceGCP):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EditableCloudResourceGCP):
            return True

        return self.to_dict() != other.to_dict()
