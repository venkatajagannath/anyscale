# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class WriteCloud(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'provider': 'CloudProviders',
        'region': 'str',
        'credentials': 'str',
        'config': 'CloudConfig',
        'is_k8s': 'bool',
        'is_aioa': 'bool',
        'availability_zones': 'list[str]',
        'is_bring_your_own_resource': 'bool',
        'is_private_cloud': 'bool',
        'cluster_management_stack_version': 'ClusterManagementStackVersions',
        'is_private_service_cloud': 'bool',
        'auto_add_user': 'bool',
        'external_id': 'str',
        'creator_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'provider': 'provider',
        'region': 'region',
        'credentials': 'credentials',
        'config': 'config',
        'is_k8s': 'is_k8s',
        'is_aioa': 'is_aioa',
        'availability_zones': 'availability_zones',
        'is_bring_your_own_resource': 'is_bring_your_own_resource',
        'is_private_cloud': 'is_private_cloud',
        'cluster_management_stack_version': 'cluster_management_stack_version',
        'is_private_service_cloud': 'is_private_service_cloud',
        'auto_add_user': 'auto_add_user',
        'external_id': 'external_id',
        'creator_id': 'creator_id'
    }

    def __init__(self, name=None, provider=None, region=None, credentials=None, config=None, is_k8s=False, is_aioa=False, availability_zones=None, is_bring_your_own_resource=None, is_private_cloud=False, cluster_management_stack_version=None, is_private_service_cloud=None, auto_add_user=False, external_id=None, creator_id=None, local_vars_configuration=None):  # noqa: E501
        """WriteCloud - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._provider = None
        self._region = None
        self._credentials = None
        self._config = None
        self._is_k8s = None
        self._is_aioa = None
        self._availability_zones = None
        self._is_bring_your_own_resource = None
        self._is_private_cloud = None
        self._cluster_management_stack_version = None
        self._is_private_service_cloud = None
        self._auto_add_user = None
        self._external_id = None
        self._creator_id = None
        self.discriminator = None

        self.name = name
        self.provider = provider
        self.region = region
        self.credentials = credentials
        if config is not None:
            self.config = config
        if is_k8s is not None:
            self.is_k8s = is_k8s
        if is_aioa is not None:
            self.is_aioa = is_aioa
        if availability_zones is not None:
            self.availability_zones = availability_zones
        if is_bring_your_own_resource is not None:
            self.is_bring_your_own_resource = is_bring_your_own_resource
        if is_private_cloud is not None:
            self.is_private_cloud = is_private_cloud
        if cluster_management_stack_version is not None:
            self.cluster_management_stack_version = cluster_management_stack_version
        if is_private_service_cloud is not None:
            self.is_private_service_cloud = is_private_service_cloud
        if auto_add_user is not None:
            self.auto_add_user = auto_add_user
        if external_id is not None:
            self.external_id = external_id
        if creator_id is not None:
            self.creator_id = creator_id

    @property
    def name(self):
        """Gets the name of this WriteCloud.  # noqa: E501

        Name of this Cloud.  # noqa: E501

        :return: The name of this WriteCloud.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WriteCloud.

        Name of this Cloud.  # noqa: E501

        :param name: The name of this WriteCloud.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this WriteCloud.  # noqa: E501

        Provider of this Cloud (e.g. AWS).  # noqa: E501

        :return: The provider of this WriteCloud.  # noqa: E501
        :rtype: CloudProviders
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this WriteCloud.

        Provider of this Cloud (e.g. AWS).  # noqa: E501

        :param provider: The provider of this WriteCloud.  # noqa: E501
        :type: CloudProviders
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def region(self):
        """Gets the region of this WriteCloud.  # noqa: E501

        Region this Cloud is operating in. This value needs to be supported by this Cloud's provider. (e.g. us-west-2)  # noqa: E501

        :return: The region of this WriteCloud.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this WriteCloud.

        Region this Cloud is operating in. This value needs to be supported by this Cloud's provider. (e.g. us-west-2)  # noqa: E501

        :param region: The region of this WriteCloud.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and region is None:  # noqa: E501
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def credentials(self):
        """Gets the credentials of this WriteCloud.  # noqa: E501

        Credentials needed to interact with this Cloud.  # noqa: E501

        :return: The credentials of this WriteCloud.  # noqa: E501
        :rtype: str
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this WriteCloud.

        Credentials needed to interact with this Cloud.  # noqa: E501

        :param credentials: The credentials of this WriteCloud.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and credentials is None:  # noqa: E501
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    @property
    def config(self):
        """Gets the config of this WriteCloud.  # noqa: E501

        Additional configurable properties of this Cloud.  # noqa: E501

        :return: The config of this WriteCloud.  # noqa: E501
        :rtype: CloudConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this WriteCloud.

        Additional configurable properties of this Cloud.  # noqa: E501

        :param config: The config of this WriteCloud.  # noqa: E501
        :type: CloudConfig
        """

        self._config = config

    @property
    def is_k8s(self):
        """Gets the is_k8s of this WriteCloud.  # noqa: E501

        Whether this cloud is managed via Kubernetes.  # noqa: E501

        :return: The is_k8s of this WriteCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_k8s

    @is_k8s.setter
    def is_k8s(self, is_k8s):
        """Sets the is_k8s of this WriteCloud.

        Whether this cloud is managed via Kubernetes.  # noqa: E501

        :param is_k8s: The is_k8s of this WriteCloud.  # noqa: E501
        :type: bool
        """

        self._is_k8s = is_k8s

    @property
    def is_aioa(self):
        """Gets the is_aioa of this WriteCloud.  # noqa: E501

        Whether this cloud is an AIOA cloud.  # noqa: E501

        :return: The is_aioa of this WriteCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_aioa

    @is_aioa.setter
    def is_aioa(self, is_aioa):
        """Sets the is_aioa of this WriteCloud.

        Whether this cloud is an AIOA cloud.  # noqa: E501

        :param is_aioa: The is_aioa of this WriteCloud.  # noqa: E501
        :type: bool
        """

        self._is_aioa = is_aioa

    @property
    def availability_zones(self):
        """Gets the availability_zones of this WriteCloud.  # noqa: E501

        The availability zones that instances of this cloud are allowed to be launched in.  # noqa: E501

        :return: The availability_zones of this WriteCloud.  # noqa: E501
        :rtype: list[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this WriteCloud.

        The availability zones that instances of this cloud are allowed to be launched in.  # noqa: E501

        :param availability_zones: The availability_zones of this WriteCloud.  # noqa: E501
        :type: list[str]
        """

        self._availability_zones = availability_zones

    @property
    def is_bring_your_own_resource(self):
        """Gets the is_bring_your_own_resource of this WriteCloud.  # noqa: E501

        Whether the resources of this cloud are provided by the customer.  # noqa: E501

        :return: The is_bring_your_own_resource of this WriteCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_bring_your_own_resource

    @is_bring_your_own_resource.setter
    def is_bring_your_own_resource(self, is_bring_your_own_resource):
        """Sets the is_bring_your_own_resource of this WriteCloud.

        Whether the resources of this cloud are provided by the customer.  # noqa: E501

        :param is_bring_your_own_resource: The is_bring_your_own_resource of this WriteCloud.  # noqa: E501
        :type: bool
        """

        self._is_bring_your_own_resource = is_bring_your_own_resource

    @property
    def is_private_cloud(self):
        """Gets the is_private_cloud of this WriteCloud.  # noqa: E501

        Whether this cloud is a private cloud.  # noqa: E501

        :return: The is_private_cloud of this WriteCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_cloud

    @is_private_cloud.setter
    def is_private_cloud(self, is_private_cloud):
        """Sets the is_private_cloud of this WriteCloud.

        Whether this cloud is a private cloud.  # noqa: E501

        :param is_private_cloud: The is_private_cloud of this WriteCloud.  # noqa: E501
        :type: bool
        """

        self._is_private_cloud = is_private_cloud

    @property
    def cluster_management_stack_version(self):
        """Gets the cluster_management_stack_version of this WriteCloud.  # noqa: E501

        The cluster management stack version of the cloud.  # noqa: E501

        :return: The cluster_management_stack_version of this WriteCloud.  # noqa: E501
        :rtype: ClusterManagementStackVersions
        """
        return self._cluster_management_stack_version

    @cluster_management_stack_version.setter
    def cluster_management_stack_version(self, cluster_management_stack_version):
        """Sets the cluster_management_stack_version of this WriteCloud.

        The cluster management stack version of the cloud.  # noqa: E501

        :param cluster_management_stack_version: The cluster_management_stack_version of this WriteCloud.  # noqa: E501
        :type: ClusterManagementStackVersions
        """

        self._cluster_management_stack_version = cluster_management_stack_version

    @property
    def is_private_service_cloud(self):
        """Gets the is_private_service_cloud of this WriteCloud.  # noqa: E501

        Whether services created in this cloud should be private.  # noqa: E501

        :return: The is_private_service_cloud of this WriteCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_service_cloud

    @is_private_service_cloud.setter
    def is_private_service_cloud(self, is_private_service_cloud):
        """Sets the is_private_service_cloud of this WriteCloud.

        Whether services created in this cloud should be private.  # noqa: E501

        :param is_private_service_cloud: The is_private_service_cloud of this WriteCloud.  # noqa: E501
        :type: bool
        """

        self._is_private_service_cloud = is_private_service_cloud

    @property
    def auto_add_user(self):
        """Gets the auto_add_user of this WriteCloud.  # noqa: E501

        Whether all users in the organization should be automatically added to this cloud. This field is only relevant for organizations with cloud isolation enabled, because all users in the organization automatically have access to all clouds if cloud isolation is not enabled.  # noqa: E501

        :return: The auto_add_user of this WriteCloud.  # noqa: E501
        :rtype: bool
        """
        return self._auto_add_user

    @auto_add_user.setter
    def auto_add_user(self, auto_add_user):
        """Sets the auto_add_user of this WriteCloud.

        Whether all users in the organization should be automatically added to this cloud. This field is only relevant for organizations with cloud isolation enabled, because all users in the organization automatically have access to all clouds if cloud isolation is not enabled.  # noqa: E501

        :param auto_add_user: The auto_add_user of this WriteCloud.  # noqa: E501
        :type: bool
        """

        self._auto_add_user = auto_add_user

    @property
    def external_id(self):
        """Gets the external_id of this WriteCloud.  # noqa: E501

        The trust policy external ID specified by the user for the cloud control plane role. It must start with the organization ID.  # noqa: E501

        :return: The external_id of this WriteCloud.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this WriteCloud.

        The trust policy external ID specified by the user for the cloud control plane role. It must start with the organization ID.  # noqa: E501

        :param external_id: The external_id of this WriteCloud.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def creator_id(self):
        """Gets the creator_id of this WriteCloud.  # noqa: E501

        DEPRECATED. This is now optional and does not need to be passed in.  # noqa: E501

        :return: The creator_id of this WriteCloud.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this WriteCloud.

        DEPRECATED. This is now optional and does not need to be passed in.  # noqa: E501

        :param creator_id: The creator_id of this WriteCloud.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteCloud):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WriteCloud):
            return True

        return self.to_dict() != other.to_dict()
