# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class MiniCloud(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'provider': 'CloudProviders',
        'is_k8s': 'bool',
        'is_aioa': 'bool',
        'cluster_management_stack_version': 'ClusterManagementStackVersions',
        'is_private_cloud': 'bool',
        'customer_aggregated_logs_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'provider': 'provider',
        'is_k8s': 'is_k8s',
        'is_aioa': 'is_aioa',
        'cluster_management_stack_version': 'cluster_management_stack_version',
        'is_private_cloud': 'is_private_cloud',
        'customer_aggregated_logs_enabled': 'customer_aggregated_logs_enabled'
    }

    def __init__(self, id=None, name=None, provider=None, is_k8s=False, is_aioa=False, cluster_management_stack_version=None, is_private_cloud=False, customer_aggregated_logs_enabled=False, local_vars_configuration=None):  # noqa: E501
        """MiniCloud - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._provider = None
        self._is_k8s = None
        self._is_aioa = None
        self._cluster_management_stack_version = None
        self._is_private_cloud = None
        self._customer_aggregated_logs_enabled = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.provider = provider
        if is_k8s is not None:
            self.is_k8s = is_k8s
        if is_aioa is not None:
            self.is_aioa = is_aioa
        if cluster_management_stack_version is not None:
            self.cluster_management_stack_version = cluster_management_stack_version
        if is_private_cloud is not None:
            self.is_private_cloud = is_private_cloud
        if customer_aggregated_logs_enabled is not None:
            self.customer_aggregated_logs_enabled = customer_aggregated_logs_enabled

    @property
    def id(self):
        """Gets the id of this MiniCloud.  # noqa: E501

        The id of the cloud  # noqa: E501

        :return: The id of this MiniCloud.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MiniCloud.

        The id of the cloud  # noqa: E501

        :param id: The id of this MiniCloud.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this MiniCloud.  # noqa: E501

        The name of this cloud  # noqa: E501

        :return: The name of this MiniCloud.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MiniCloud.

        The name of this cloud  # noqa: E501

        :param name: The name of this MiniCloud.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def provider(self):
        """Gets the provider of this MiniCloud.  # noqa: E501

        The cloud provider for this cloud  # noqa: E501

        :return: The provider of this MiniCloud.  # noqa: E501
        :rtype: CloudProviders
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this MiniCloud.

        The cloud provider for this cloud  # noqa: E501

        :param provider: The provider of this MiniCloud.  # noqa: E501
        :type: CloudProviders
        """
        if self.local_vars_configuration.client_side_validation and provider is None:  # noqa: E501
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501

        self._provider = provider

    @property
    def is_k8s(self):
        """Gets the is_k8s of this MiniCloud.  # noqa: E501

        Whether this cloud is managed via K8s  # noqa: E501

        :return: The is_k8s of this MiniCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_k8s

    @is_k8s.setter
    def is_k8s(self, is_k8s):
        """Sets the is_k8s of this MiniCloud.

        Whether this cloud is managed via K8s  # noqa: E501

        :param is_k8s: The is_k8s of this MiniCloud.  # noqa: E501
        :type: bool
        """

        self._is_k8s = is_k8s

    @property
    def is_aioa(self):
        """Gets the is_aioa of this MiniCloud.  # noqa: E501

        Whether this cloud is an AIOA cloud.  # noqa: E501

        :return: The is_aioa of this MiniCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_aioa

    @is_aioa.setter
    def is_aioa(self, is_aioa):
        """Sets the is_aioa of this MiniCloud.

        Whether this cloud is an AIOA cloud.  # noqa: E501

        :param is_aioa: The is_aioa of this MiniCloud.  # noqa: E501
        :type: bool
        """

        self._is_aioa = is_aioa

    @property
    def cluster_management_stack_version(self):
        """Gets the cluster_management_stack_version of this MiniCloud.  # noqa: E501

        The cluster management stack version of the cloud.  # noqa: E501

        :return: The cluster_management_stack_version of this MiniCloud.  # noqa: E501
        :rtype: ClusterManagementStackVersions
        """
        return self._cluster_management_stack_version

    @cluster_management_stack_version.setter
    def cluster_management_stack_version(self, cluster_management_stack_version):
        """Sets the cluster_management_stack_version of this MiniCloud.

        The cluster management stack version of the cloud.  # noqa: E501

        :param cluster_management_stack_version: The cluster_management_stack_version of this MiniCloud.  # noqa: E501
        :type: ClusterManagementStackVersions
        """

        self._cluster_management_stack_version = cluster_management_stack_version

    @property
    def is_private_cloud(self):
        """Gets the is_private_cloud of this MiniCloud.  # noqa: E501

        Whether this cloud is a private cloud. This is only possible if clouds is a V2 cloud.  # noqa: E501

        :return: The is_private_cloud of this MiniCloud.  # noqa: E501
        :rtype: bool
        """
        return self._is_private_cloud

    @is_private_cloud.setter
    def is_private_cloud(self, is_private_cloud):
        """Sets the is_private_cloud of this MiniCloud.

        Whether this cloud is a private cloud. This is only possible if clouds is a V2 cloud.  # noqa: E501

        :param is_private_cloud: The is_private_cloud of this MiniCloud.  # noqa: E501
        :type: bool
        """

        self._is_private_cloud = is_private_cloud

    @property
    def customer_aggregated_logs_enabled(self):
        """Gets the customer_aggregated_logs_enabled of this MiniCloud.  # noqa: E501

        Whether this cloud has customer aggregated logs enabled.  # noqa: E501

        :return: The customer_aggregated_logs_enabled of this MiniCloud.  # noqa: E501
        :rtype: bool
        """
        return self._customer_aggregated_logs_enabled

    @customer_aggregated_logs_enabled.setter
    def customer_aggregated_logs_enabled(self, customer_aggregated_logs_enabled):
        """Sets the customer_aggregated_logs_enabled of this MiniCloud.

        Whether this cloud has customer aggregated logs enabled.  # noqa: E501

        :param customer_aggregated_logs_enabled: The customer_aggregated_logs_enabled of this MiniCloud.  # noqa: E501
        :type: bool
        """

        self._customer_aggregated_logs_enabled = customer_aggregated_logs_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MiniCloud):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MiniCloud):
            return True

        return self.to_dict() != other.to_dict()
