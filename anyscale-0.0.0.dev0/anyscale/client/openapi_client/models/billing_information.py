# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BillingInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'edit_payment_profiles': 'str',
        'aioa_billing_information': 'ServiceUsage',
        'aica_billing_information': 'ServiceUsage'
    }

    attribute_map = {
        'edit_payment_profiles': 'edit_payment_profiles',
        'aioa_billing_information': 'aioa_billing_information',
        'aica_billing_information': 'aica_billing_information'
    }

    def __init__(self, edit_payment_profiles=None, aioa_billing_information=None, aica_billing_information=None, local_vars_configuration=None):  # noqa: E501
        """BillingInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._edit_payment_profiles = None
        self._aioa_billing_information = None
        self._aica_billing_information = None
        self.discriminator = None

        self.edit_payment_profiles = edit_payment_profiles
        self.aioa_billing_information = aioa_billing_information
        self.aica_billing_information = aica_billing_information

    @property
    def edit_payment_profiles(self):
        """Gets the edit_payment_profiles of this BillingInformation.  # noqa: E501

        Link to edit payment information for organization.  # noqa: E501

        :return: The edit_payment_profiles of this BillingInformation.  # noqa: E501
        :rtype: str
        """
        return self._edit_payment_profiles

    @edit_payment_profiles.setter
    def edit_payment_profiles(self, edit_payment_profiles):
        """Sets the edit_payment_profiles of this BillingInformation.

        Link to edit payment information for organization.  # noqa: E501

        :param edit_payment_profiles: The edit_payment_profiles of this BillingInformation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and edit_payment_profiles is None:  # noqa: E501
            raise ValueError("Invalid value for `edit_payment_profiles`, must not be `None`")  # noqa: E501

        self._edit_payment_profiles = edit_payment_profiles

    @property
    def aioa_billing_information(self):
        """Gets the aioa_billing_information of this BillingInformation.  # noqa: E501

        Billing information for AIOA subscription.  # noqa: E501

        :return: The aioa_billing_information of this BillingInformation.  # noqa: E501
        :rtype: ServiceUsage
        """
        return self._aioa_billing_information

    @aioa_billing_information.setter
    def aioa_billing_information(self, aioa_billing_information):
        """Sets the aioa_billing_information of this BillingInformation.

        Billing information for AIOA subscription.  # noqa: E501

        :param aioa_billing_information: The aioa_billing_information of this BillingInformation.  # noqa: E501
        :type: ServiceUsage
        """
        if self.local_vars_configuration.client_side_validation and aioa_billing_information is None:  # noqa: E501
            raise ValueError("Invalid value for `aioa_billing_information`, must not be `None`")  # noqa: E501

        self._aioa_billing_information = aioa_billing_information

    @property
    def aica_billing_information(self):
        """Gets the aica_billing_information of this BillingInformation.  # noqa: E501

        Billing information for AICA subscription.  # noqa: E501

        :return: The aica_billing_information of this BillingInformation.  # noqa: E501
        :rtype: ServiceUsage
        """
        return self._aica_billing_information

    @aica_billing_information.setter
    def aica_billing_information(self, aica_billing_information):
        """Sets the aica_billing_information of this BillingInformation.

        Billing information for AICA subscription.  # noqa: E501

        :param aica_billing_information: The aica_billing_information of this BillingInformation.  # noqa: E501
        :type: ServiceUsage
        """
        if self.local_vars_configuration.client_side_validation and aica_billing_information is None:  # noqa: E501
            raise ValueError("Invalid value for `aica_billing_information`, must not be `None`")  # noqa: E501

        self._aica_billing_information = aica_billing_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BillingInformation):
            return True

        return self.to_dict() != other.to_dict()
