# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SetupInitializeSessionOptions(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'str',
        'cluster_config': 'WriteClusterConfig',
        'no_restart': 'bool',
        'restart_only': 'bool',
        'no_update': 'bool'
    }

    attribute_map = {
        'project_id': 'project_id',
        'cluster_config': 'cluster_config',
        'no_restart': 'no_restart',
        'restart_only': 'restart_only',
        'no_update': 'no_update'
    }

    def __init__(self, project_id=None, cluster_config=None, no_restart=False, restart_only=False, no_update=False, local_vars_configuration=None):  # noqa: E501
        """SetupInitializeSessionOptions - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._cluster_config = None
        self._no_restart = None
        self._restart_only = None
        self._no_update = None
        self.discriminator = None

        self.project_id = project_id
        if cluster_config is not None:
            self.cluster_config = cluster_config
        if no_restart is not None:
            self.no_restart = no_restart
        if restart_only is not None:
            self.restart_only = restart_only
        if no_update is not None:
            self.no_update = no_update

    @property
    def project_id(self):
        """Gets the project_id of this SetupInitializeSessionOptions.  # noqa: E501


        :return: The project_id of this SetupInitializeSessionOptions.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this SetupInitializeSessionOptions.


        :param project_id: The project_id of this SetupInitializeSessionOptions.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def cluster_config(self):
        """Gets the cluster_config of this SetupInitializeSessionOptions.  # noqa: E501


        :return: The cluster_config of this SetupInitializeSessionOptions.  # noqa: E501
        :rtype: WriteClusterConfig
        """
        return self._cluster_config

    @cluster_config.setter
    def cluster_config(self, cluster_config):
        """Sets the cluster_config of this SetupInitializeSessionOptions.


        :param cluster_config: The cluster_config of this SetupInitializeSessionOptions.  # noqa: E501
        :type: WriteClusterConfig
        """

        self._cluster_config = cluster_config

    @property
    def no_restart(self):
        """Gets the no_restart of this SetupInitializeSessionOptions.  # noqa: E501


        :return: The no_restart of this SetupInitializeSessionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._no_restart

    @no_restart.setter
    def no_restart(self, no_restart):
        """Sets the no_restart of this SetupInitializeSessionOptions.


        :param no_restart: The no_restart of this SetupInitializeSessionOptions.  # noqa: E501
        :type: bool
        """

        self._no_restart = no_restart

    @property
    def restart_only(self):
        """Gets the restart_only of this SetupInitializeSessionOptions.  # noqa: E501


        :return: The restart_only of this SetupInitializeSessionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._restart_only

    @restart_only.setter
    def restart_only(self, restart_only):
        """Sets the restart_only of this SetupInitializeSessionOptions.


        :param restart_only: The restart_only of this SetupInitializeSessionOptions.  # noqa: E501
        :type: bool
        """

        self._restart_only = restart_only

    @property
    def no_update(self):
        """Gets the no_update of this SetupInitializeSessionOptions.  # noqa: E501


        :return: The no_update of this SetupInitializeSessionOptions.  # noqa: E501
        :rtype: bool
        """
        return self._no_update

    @no_update.setter
    def no_update(self, no_update):
        """Sets the no_update of this SetupInitializeSessionOptions.


        :param no_update: The no_update of this SetupInitializeSessionOptions.  # noqa: E501
        :type: bool
        """

        self._no_update = no_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SetupInitializeSessionOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SetupInitializeSessionOptions):
            return True

        return self.to_dict() != other.to_dict()
