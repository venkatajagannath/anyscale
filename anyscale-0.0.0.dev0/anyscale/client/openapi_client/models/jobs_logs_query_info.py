# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class JobsLogsQueryInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'loki_dns_name': 'str',
        'loki_query': 'str',
        'access_token': 'str'
    }

    attribute_map = {
        'loki_dns_name': 'loki_dns_name',
        'loki_query': 'loki_query',
        'access_token': 'access_token'
    }

    def __init__(self, loki_dns_name=None, loki_query=None, access_token=None, local_vars_configuration=None):  # noqa: E501
        """JobsLogsQueryInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._loki_dns_name = None
        self._loki_query = None
        self._access_token = None
        self.discriminator = None

        self.loki_dns_name = loki_dns_name
        self.loki_query = loki_query
        self.access_token = access_token

    @property
    def loki_dns_name(self):
        """Gets the loki_dns_name of this JobsLogsQueryInfo.  # noqa: E501

        The DNS name for loki endpoint.  # noqa: E501

        :return: The loki_dns_name of this JobsLogsQueryInfo.  # noqa: E501
        :rtype: str
        """
        return self._loki_dns_name

    @loki_dns_name.setter
    def loki_dns_name(self, loki_dns_name):
        """Sets the loki_dns_name of this JobsLogsQueryInfo.

        The DNS name for loki endpoint.  # noqa: E501

        :param loki_dns_name: The loki_dns_name of this JobsLogsQueryInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and loki_dns_name is None:  # noqa: E501
            raise ValueError("Invalid value for `loki_dns_name`, must not be `None`")  # noqa: E501

        self._loki_dns_name = loki_dns_name

    @property
    def loki_query(self):
        """Gets the loki_query of this JobsLogsQueryInfo.  # noqa: E501

        The constructed loki query for a given job.  # noqa: E501

        :return: The loki_query of this JobsLogsQueryInfo.  # noqa: E501
        :rtype: str
        """
        return self._loki_query

    @loki_query.setter
    def loki_query(self, loki_query):
        """Sets the loki_query of this JobsLogsQueryInfo.

        The constructed loki query for a given job.  # noqa: E501

        :param loki_query: The loki_query of this JobsLogsQueryInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and loki_query is None:  # noqa: E501
            raise ValueError("Invalid value for `loki_query`, must not be `None`")  # noqa: E501

        self._loki_query = loki_query

    @property
    def access_token(self):
        """Gets the access_token of this JobsLogsQueryInfo.  # noqa: E501

        The token required to query Loki.  # noqa: E501

        :return: The access_token of this JobsLogsQueryInfo.  # noqa: E501
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this JobsLogsQueryInfo.

        The token required to query Loki.  # noqa: E501

        :param access_token: The access_token of this JobsLogsQueryInfo.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and access_token is None:  # noqa: E501
            raise ValueError("Invalid value for `access_token`, must not be `None`")  # noqa: E501

        self._access_token = access_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobsLogsQueryInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobsLogsQueryInfo):
            return True

        return self.to_dict() != other.to_dict()
