# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ScheduleConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'cron_expression': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'cron_expression': 'cron_expression',
        'timezone': 'timezone'
    }

    def __init__(self, cron_expression=None, timezone='Universal', local_vars_configuration=None):  # noqa: E501
        """ScheduleConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._cron_expression = None
        self._timezone = None
        self.discriminator = None

        self.cron_expression = cron_expression
        if timezone is not None:
            self.timezone = timezone

    @property
    def cron_expression(self):
        """Gets the cron_expression of this ScheduleConfig.  # noqa: E501

        A cron expression to define the frequency at which to run this cron job, for example '0 0 * * *' is a cron expression that means 'run at midnight'. Visit crontab.guru to construct a precise cron_expression.  # noqa: E501

        :return: The cron_expression of this ScheduleConfig.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this ScheduleConfig.

        A cron expression to define the frequency at which to run this cron job, for example '0 0 * * *' is a cron expression that means 'run at midnight'. Visit crontab.guru to construct a precise cron_expression.  # noqa: E501

        :param cron_expression: The cron_expression of this ScheduleConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cron_expression is None:  # noqa: E501
            raise ValueError("Invalid value for `cron_expression`, must not be `None`")  # noqa: E501

        self._cron_expression = cron_expression

    @property
    def timezone(self):
        """Gets the timezone of this ScheduleConfig.  # noqa: E501

        The timezone in which to interpret the cron_expression. Default is Universal time (UTC).  # noqa: E501

        :return: The timezone of this ScheduleConfig.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ScheduleConfig.

        The timezone in which to interpret the cron_expression. Default is Universal time (UTC).  # noqa: E501

        :param timezone: The timezone of this ScheduleConfig.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScheduleConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScheduleConfig):
            return True

        return self.to_dict() != other.to_dict()
