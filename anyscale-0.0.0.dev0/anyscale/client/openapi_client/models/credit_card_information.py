# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreditCardInformation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'card_type': 'str',
        'masked_card_number': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'expiration_month': 'int',
        'expiration_year': 'int'
    }

    attribute_map = {
        'card_type': 'card_type',
        'masked_card_number': 'masked_card_number',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'expiration_month': 'expiration_month',
        'expiration_year': 'expiration_year'
    }

    def __init__(self, card_type=None, masked_card_number=None, first_name=None, last_name=None, expiration_month=None, expiration_year=None, local_vars_configuration=None):  # noqa: E501
        """CreditCardInformation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._card_type = None
        self._masked_card_number = None
        self._first_name = None
        self._last_name = None
        self._expiration_month = None
        self._expiration_year = None
        self.discriminator = None

        self.card_type = card_type
        self.masked_card_number = masked_card_number
        self.first_name = first_name
        self.last_name = last_name
        self.expiration_month = expiration_month
        self.expiration_year = expiration_year

    @property
    def card_type(self):
        """Gets the card_type of this CreditCardInformation.  # noqa: E501

        Type of credit card.  # noqa: E501

        :return: The card_type of this CreditCardInformation.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CreditCardInformation.

        Type of credit card.  # noqa: E501

        :param card_type: The card_type of this CreditCardInformation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and card_type is None:  # noqa: E501
            raise ValueError("Invalid value for `card_type`, must not be `None`")  # noqa: E501

        self._card_type = card_type

    @property
    def masked_card_number(self):
        """Gets the masked_card_number of this CreditCardInformation.  # noqa: E501

        Masked credit card number used for subscription.  # noqa: E501

        :return: The masked_card_number of this CreditCardInformation.  # noqa: E501
        :rtype: str
        """
        return self._masked_card_number

    @masked_card_number.setter
    def masked_card_number(self, masked_card_number):
        """Sets the masked_card_number of this CreditCardInformation.

        Masked credit card number used for subscription.  # noqa: E501

        :param masked_card_number: The masked_card_number of this CreditCardInformation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and masked_card_number is None:  # noqa: E501
            raise ValueError("Invalid value for `masked_card_number`, must not be `None`")  # noqa: E501

        self._masked_card_number = masked_card_number

    @property
    def first_name(self):
        """Gets the first_name of this CreditCardInformation.  # noqa: E501

        First name of credit card owner.  # noqa: E501

        :return: The first_name of this CreditCardInformation.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this CreditCardInformation.

        First name of credit card owner.  # noqa: E501

        :param first_name: The first_name of this CreditCardInformation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and first_name is None:  # noqa: E501
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this CreditCardInformation.  # noqa: E501

        Last name of credit card owner.  # noqa: E501

        :return: The last_name of this CreditCardInformation.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this CreditCardInformation.

        Last name of credit card owner.  # noqa: E501

        :param last_name: The last_name of this CreditCardInformation.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and last_name is None:  # noqa: E501
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def expiration_month(self):
        """Gets the expiration_month of this CreditCardInformation.  # noqa: E501

        Month credit card expires.  # noqa: E501

        :return: The expiration_month of this CreditCardInformation.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this CreditCardInformation.

        Month credit card expires.  # noqa: E501

        :param expiration_month: The expiration_month of this CreditCardInformation.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expiration_month is None:  # noqa: E501
            raise ValueError("Invalid value for `expiration_month`, must not be `None`")  # noqa: E501

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this CreditCardInformation.  # noqa: E501

        Year credit card expires.  # noqa: E501

        :return: The expiration_year of this CreditCardInformation.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this CreditCardInformation.

        Year credit card expires.  # noqa: E501

        :param expiration_year: The expiration_year of this CreditCardInformation.  # noqa: E501
        :type: int
        """
        if self.local_vars_configuration.client_side_validation and expiration_year is None:  # noqa: E501
            raise ValueError("Invalid value for `expiration_year`, must not be `None`")  # noqa: E501

        self._expiration_year = expiration_year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardInformation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreditCardInformation):
            return True

        return self.to_dict() != other.to_dict()
