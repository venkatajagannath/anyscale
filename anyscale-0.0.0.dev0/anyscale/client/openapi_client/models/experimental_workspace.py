# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ExperimentalWorkspace(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'description': 'str',
        'project_id': 'str',
        'cloud_id': 'str',
        'compute_config_id': 'str',
        'base_snapshot': 'str',
        'id': 'str',
        'created_at': 'datetime',
        'creator_id': 'str',
        'creator_email': 'str',
        'creator_deleted_at': 'datetime',
        'organization_id': 'str',
        'is_deleted': 'bool',
        'cluster_id': 'str',
        'environment_id': 'str',
        'current_state': 'str',
        'integration_execution_details_id': 'str',
        'template_url': 'str',
        'snapshot_error_at': 'datetime',
        'snapshot_state': 'WorkspaceSnapshotStates',
        'state': 'SessionState',
        'integration_details': 'IntegrationDetails'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'project_id': 'project_id',
        'cloud_id': 'cloud_id',
        'compute_config_id': 'compute_config_id',
        'base_snapshot': 'base_snapshot',
        'id': 'id',
        'created_at': 'created_at',
        'creator_id': 'creator_id',
        'creator_email': 'creator_email',
        'creator_deleted_at': 'creator_deleted_at',
        'organization_id': 'organization_id',
        'is_deleted': 'is_deleted',
        'cluster_id': 'cluster_id',
        'environment_id': 'environment_id',
        'current_state': 'current_state',
        'integration_execution_details_id': 'integration_execution_details_id',
        'template_url': 'template_url',
        'snapshot_error_at': 'snapshot_error_at',
        'snapshot_state': 'snapshot_state',
        'state': 'state',
        'integration_details': 'integration_details'
    }

    def __init__(self, name=None, description=None, project_id=None, cloud_id=None, compute_config_id=None, base_snapshot=None, id=None, created_at=None, creator_id=None, creator_email=None, creator_deleted_at=None, organization_id=None, is_deleted=None, cluster_id=None, environment_id=None, current_state=None, integration_execution_details_id=None, template_url=None, snapshot_error_at=None, snapshot_state=None, state=None, integration_details=None, local_vars_configuration=None):  # noqa: E501
        """ExperimentalWorkspace - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._description = None
        self._project_id = None
        self._cloud_id = None
        self._compute_config_id = None
        self._base_snapshot = None
        self._id = None
        self._created_at = None
        self._creator_id = None
        self._creator_email = None
        self._creator_deleted_at = None
        self._organization_id = None
        self._is_deleted = None
        self._cluster_id = None
        self._environment_id = None
        self._current_state = None
        self._integration_execution_details_id = None
        self._template_url = None
        self._snapshot_error_at = None
        self._snapshot_state = None
        self._state = None
        self._integration_details = None
        self.discriminator = None

        self.name = name
        if description is not None:
            self.description = description
        self.project_id = project_id
        self.cloud_id = cloud_id
        self.compute_config_id = compute_config_id
        if base_snapshot is not None:
            self.base_snapshot = base_snapshot
        self.id = id
        self.created_at = created_at
        self.creator_id = creator_id
        self.creator_email = creator_email
        if creator_deleted_at is not None:
            self.creator_deleted_at = creator_deleted_at
        self.organization_id = organization_id
        if is_deleted is not None:
            self.is_deleted = is_deleted
        self.cluster_id = cluster_id
        if environment_id is not None:
            self.environment_id = environment_id
        if current_state is not None:
            self.current_state = current_state
        if integration_execution_details_id is not None:
            self.integration_execution_details_id = integration_execution_details_id
        if template_url is not None:
            self.template_url = template_url
        if snapshot_error_at is not None:
            self.snapshot_error_at = snapshot_error_at
        if snapshot_state is not None:
            self.snapshot_state = snapshot_state
        if state is not None:
            self.state = state
        if integration_details is not None:
            self.integration_details = integration_details

    @property
    def name(self):
        """Gets the name of this ExperimentalWorkspace.  # noqa: E501

        Name of the workspace to be created.  # noqa: E501

        :return: The name of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExperimentalWorkspace.

        Name of the workspace to be created.  # noqa: E501

        :param name: The name of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExperimentalWorkspace.  # noqa: E501

        Description of Workspace.  # noqa: E501

        :return: The description of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExperimentalWorkspace.

        Description of Workspace.  # noqa: E501

        :param description: The description of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def project_id(self):
        """Gets the project_id of this ExperimentalWorkspace.  # noqa: E501

        Id of the project that this workspace belongs to.  # noqa: E501

        :return: The project_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ExperimentalWorkspace.

        Id of the project that this workspace belongs to.  # noqa: E501

        :param project_id: The project_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and project_id is None:  # noqa: E501
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def cloud_id(self):
        """Gets the cloud_id of this ExperimentalWorkspace.  # noqa: E501

        The cloud id for the workspace.  # noqa: E501

        :return: The cloud_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id):
        """Sets the cloud_id of this ExperimentalWorkspace.

        The cloud id for the workspace.  # noqa: E501

        :param cloud_id: The cloud_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cloud_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cloud_id`, must not be `None`")  # noqa: E501

        self._cloud_id = cloud_id

    @property
    def compute_config_id(self):
        """Gets the compute_config_id of this ExperimentalWorkspace.  # noqa: E501

        The compute config id for the workspace  # noqa: E501

        :return: The compute_config_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._compute_config_id

    @compute_config_id.setter
    def compute_config_id(self, compute_config_id):
        """Sets the compute_config_id of this ExperimentalWorkspace.

        The compute config id for the workspace  # noqa: E501

        :param compute_config_id: The compute_config_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and compute_config_id is None:  # noqa: E501
            raise ValueError("Invalid value for `compute_config_id`, must not be `None`")  # noqa: E501

        self._compute_config_id = compute_config_id

    @property
    def base_snapshot(self):
        """Gets the base_snapshot of this ExperimentalWorkspace.  # noqa: E501

        Metadata on base snapshot  # noqa: E501

        :return: The base_snapshot of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._base_snapshot

    @base_snapshot.setter
    def base_snapshot(self, base_snapshot):
        """Sets the base_snapshot of this ExperimentalWorkspace.

        Metadata on base snapshot  # noqa: E501

        :param base_snapshot: The base_snapshot of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """

        self._base_snapshot = base_snapshot

    @property
    def id(self):
        """Gets the id of this ExperimentalWorkspace.  # noqa: E501

        Server assigned unique identifier of the workspace.  # noqa: E501

        :return: The id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExperimentalWorkspace.

        Server assigned unique identifier of the workspace.  # noqa: E501

        :param id: The id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this ExperimentalWorkspace.  # noqa: E501

        Time at which Workspace was created.  # noqa: E501

        :return: The created_at of this ExperimentalWorkspace.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ExperimentalWorkspace.

        Time at which Workspace was created.  # noqa: E501

        :param created_at: The created_at of this ExperimentalWorkspace.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def creator_id(self):
        """Gets the creator_id of this ExperimentalWorkspace.  # noqa: E501

        Identifier of user who created the Workspace.  # noqa: E501

        :return: The creator_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ExperimentalWorkspace.

        Identifier of user who created the Workspace.  # noqa: E501

        :param creator_id: The creator_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creator_id is None:  # noqa: E501
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    @property
    def creator_email(self):
        """Gets the creator_email of this ExperimentalWorkspace.  # noqa: E501

        Email of user who created the Workspace.  # noqa: E501

        :return: The creator_email of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._creator_email

    @creator_email.setter
    def creator_email(self, creator_email):
        """Sets the creator_email of this ExperimentalWorkspace.

        Email of user who created the Workspace.  # noqa: E501

        :param creator_email: The creator_email of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creator_email is None:  # noqa: E501
            raise ValueError("Invalid value for `creator_email`, must not be `None`")  # noqa: E501

        self._creator_email = creator_email

    @property
    def creator_deleted_at(self):
        """Gets the creator_deleted_at of this ExperimentalWorkspace.  # noqa: E501

        Timestamp of when the user who created the workspace was deleted.  # noqa: E501

        :return: The creator_deleted_at of this ExperimentalWorkspace.  # noqa: E501
        :rtype: datetime
        """
        return self._creator_deleted_at

    @creator_deleted_at.setter
    def creator_deleted_at(self, creator_deleted_at):
        """Sets the creator_deleted_at of this ExperimentalWorkspace.

        Timestamp of when the user who created the workspace was deleted.  # noqa: E501

        :param creator_deleted_at: The creator_deleted_at of this ExperimentalWorkspace.  # noqa: E501
        :type: datetime
        """

        self._creator_deleted_at = creator_deleted_at

    @property
    def organization_id(self):
        """Gets the organization_id of this ExperimentalWorkspace.  # noqa: E501

        Organization that the workspace is associated with.  # noqa: E501

        :return: The organization_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ExperimentalWorkspace.

        Organization that the workspace is associated with.  # noqa: E501

        :param organization_id: The organization_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and organization_id is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def is_deleted(self):
        """Gets the is_deleted of this ExperimentalWorkspace.  # noqa: E501

        Is the workspace deleted  # noqa: E501

        :return: The is_deleted of this ExperimentalWorkspace.  # noqa: E501
        :rtype: bool
        """
        return self._is_deleted

    @is_deleted.setter
    def is_deleted(self, is_deleted):
        """Sets the is_deleted of this ExperimentalWorkspace.

        Is the workspace deleted  # noqa: E501

        :param is_deleted: The is_deleted of this ExperimentalWorkspace.  # noqa: E501
        :type: bool
        """

        self._is_deleted = is_deleted

    @property
    def cluster_id(self):
        """Gets the cluster_id of this ExperimentalWorkspace.  # noqa: E501

        ID of the Cluster.  # noqa: E501

        :return: The cluster_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this ExperimentalWorkspace.

        ID of the Cluster.  # noqa: E501

        :param cluster_id: The cluster_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and cluster_id is None:  # noqa: E501
            raise ValueError("Invalid value for `cluster_id`, must not be `None`")  # noqa: E501

        self._cluster_id = cluster_id

    @property
    def environment_id(self):
        """Gets the environment_id of this ExperimentalWorkspace.  # noqa: E501

        ID of the environment.  # noqa: E501

        :return: The environment_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this ExperimentalWorkspace.

        ID of the environment.  # noqa: E501

        :param environment_id: The environment_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def current_state(self):
        """Gets the current_state of this ExperimentalWorkspace.  # noqa: E501

        The workspace current state.  # noqa: E501

        :return: The current_state of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._current_state

    @current_state.setter
    def current_state(self, current_state):
        """Sets the current_state of this ExperimentalWorkspace.

        The workspace current state.  # noqa: E501

        :param current_state: The current_state of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """

        self._current_state = current_state

    @property
    def integration_execution_details_id(self):
        """Gets the integration_execution_details_id of this ExperimentalWorkspace.  # noqa: E501

        Integration details ID (eg: W&B url) for this workspace.  # noqa: E501

        :return: The integration_execution_details_id of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._integration_execution_details_id

    @integration_execution_details_id.setter
    def integration_execution_details_id(self, integration_execution_details_id):
        """Sets the integration_execution_details_id of this ExperimentalWorkspace.

        Integration details ID (eg: W&B url) for this workspace.  # noqa: E501

        :param integration_execution_details_id: The integration_execution_details_id of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """

        self._integration_execution_details_id = integration_execution_details_id

    @property
    def template_url(self):
        """Gets the template_url of this ExperimentalWorkspace.  # noqa: E501

        The template url for the workspace  # noqa: E501

        :return: The template_url of this ExperimentalWorkspace.  # noqa: E501
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this ExperimentalWorkspace.

        The template url for the workspace  # noqa: E501

        :param template_url: The template_url of this ExperimentalWorkspace.  # noqa: E501
        :type: str
        """

        self._template_url = template_url

    @property
    def snapshot_error_at(self):
        """Gets the snapshot_error_at of this ExperimentalWorkspace.  # noqa: E501

        The time at which the snapshot error occurred. If this field is absent, no snapshot error has occurred.  # noqa: E501

        :return: The snapshot_error_at of this ExperimentalWorkspace.  # noqa: E501
        :rtype: datetime
        """
        return self._snapshot_error_at

    @snapshot_error_at.setter
    def snapshot_error_at(self, snapshot_error_at):
        """Sets the snapshot_error_at of this ExperimentalWorkspace.

        The time at which the snapshot error occurred. If this field is absent, no snapshot error has occurred.  # noqa: E501

        :param snapshot_error_at: The snapshot_error_at of this ExperimentalWorkspace.  # noqa: E501
        :type: datetime
        """

        self._snapshot_error_at = snapshot_error_at

    @property
    def snapshot_state(self):
        """Gets the snapshot_state of this ExperimentalWorkspace.  # noqa: E501

        The state of the snapshot.  # noqa: E501

        :return: The snapshot_state of this ExperimentalWorkspace.  # noqa: E501
        :rtype: WorkspaceSnapshotStates
        """
        return self._snapshot_state

    @snapshot_state.setter
    def snapshot_state(self, snapshot_state):
        """Sets the snapshot_state of this ExperimentalWorkspace.

        The state of the snapshot.  # noqa: E501

        :param snapshot_state: The snapshot_state of this ExperimentalWorkspace.  # noqa: E501
        :type: WorkspaceSnapshotStates
        """

        self._snapshot_state = snapshot_state

    @property
    def state(self):
        """Gets the state of this ExperimentalWorkspace.  # noqa: E501

        The workspace current state enum.  # noqa: E501

        :return: The state of this ExperimentalWorkspace.  # noqa: E501
        :rtype: SessionState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExperimentalWorkspace.

        The workspace current state enum.  # noqa: E501

        :param state: The state of this ExperimentalWorkspace.  # noqa: E501
        :type: SessionState
        """

        self._state = state

    @property
    def integration_details(self):
        """Gets the integration_details of this ExperimentalWorkspace.  # noqa: E501

        Integration details (eg: W&B url) for this workspace.  # noqa: E501

        :return: The integration_details of this ExperimentalWorkspace.  # noqa: E501
        :rtype: IntegrationDetails
        """
        return self._integration_details

    @integration_details.setter
    def integration_details(self, integration_details):
        """Sets the integration_details of this ExperimentalWorkspace.

        Integration details (eg: W&B url) for this workspace.  # noqa: E501

        :param integration_details: The integration_details of this ExperimentalWorkspace.  # noqa: E501
        :type: IntegrationDetails
        """

        self._integration_details = integration_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExperimentalWorkspace):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExperimentalWorkspace):
            return True

        return self.to_dict() != other.to_dict()
