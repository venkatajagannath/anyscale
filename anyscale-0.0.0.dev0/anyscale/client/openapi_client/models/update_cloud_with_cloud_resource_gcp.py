# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class UpdateCloudWithCloudResourceGCP(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'availability_zones': 'list[str]',
        'state': 'CloudState',
        'cloud_resource_to_update': 'CreateCloudResourceGCP'
    }

    attribute_map = {
        'availability_zones': 'availability_zones',
        'state': 'state',
        'cloud_resource_to_update': 'cloud_resource_to_update'
    }

    def __init__(self, availability_zones=None, state=None, cloud_resource_to_update=None, local_vars_configuration=None):  # noqa: E501
        """UpdateCloudWithCloudResourceGCP - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._availability_zones = None
        self._state = None
        self._cloud_resource_to_update = None
        self.discriminator = None

        if availability_zones is not None:
            self.availability_zones = availability_zones
        if state is not None:
            self.state = state
        if cloud_resource_to_update is not None:
            self.cloud_resource_to_update = cloud_resource_to_update

    @property
    def availability_zones(self):
        """Gets the availability_zones of this UpdateCloudWithCloudResourceGCP.  # noqa: E501

        The availability zones that instances of this cloud are allowed to be launched in.  # noqa: E501

        :return: The availability_zones of this UpdateCloudWithCloudResourceGCP.  # noqa: E501
        :rtype: list[str]
        """
        return self._availability_zones

    @availability_zones.setter
    def availability_zones(self, availability_zones):
        """Sets the availability_zones of this UpdateCloudWithCloudResourceGCP.

        The availability zones that instances of this cloud are allowed to be launched in.  # noqa: E501

        :param availability_zones: The availability_zones of this UpdateCloudWithCloudResourceGCP.  # noqa: E501
        :type: list[str]
        """

        self._availability_zones = availability_zones

    @property
    def state(self):
        """Gets the state of this UpdateCloudWithCloudResourceGCP.  # noqa: E501

        The state of this cloud.  # noqa: E501

        :return: The state of this UpdateCloudWithCloudResourceGCP.  # noqa: E501
        :rtype: CloudState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this UpdateCloudWithCloudResourceGCP.

        The state of this cloud.  # noqa: E501

        :param state: The state of this UpdateCloudWithCloudResourceGCP.  # noqa: E501
        :type: CloudState
        """

        self._state = state

    @property
    def cloud_resource_to_update(self):
        """Gets the cloud_resource_to_update of this UpdateCloudWithCloudResourceGCP.  # noqa: E501

        The cloud resource of this GCP cloud.  # noqa: E501

        :return: The cloud_resource_to_update of this UpdateCloudWithCloudResourceGCP.  # noqa: E501
        :rtype: CreateCloudResourceGCP
        """
        return self._cloud_resource_to_update

    @cloud_resource_to_update.setter
    def cloud_resource_to_update(self, cloud_resource_to_update):
        """Sets the cloud_resource_to_update of this UpdateCloudWithCloudResourceGCP.

        The cloud resource of this GCP cloud.  # noqa: E501

        :param cloud_resource_to_update: The cloud_resource_to_update of this UpdateCloudWithCloudResourceGCP.  # noqa: E501
        :type: CreateCloudResourceGCP
        """

        self._cloud_resource_to_update = cloud_resource_to_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCloudWithCloudResourceGCP):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCloudWithCloudResourceGCP):
            return True

        return self.to_dict() != other.to_dict()
