# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class CreateCloudResource(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aws_vpc_id': 'str',
        'aws_subnet_ids_with_availability_zones': 'list[SubnetIdWithAvailabilityZoneAWS]',
        'aws_iam_role_arns': 'list[str]',
        'aws_security_groups': 'list[str]',
        'aws_s3_id': 'str',
        'aws_efs_id': 'str',
        'aws_efs_mount_target_ip': 'str',
        'aws_cloudformation_stack_id': 'str',
        'gcp_vpc_id': 'str',
        'gcp_subnet_ids': 'list[str]',
        'memorydb_cluster_config': 'AWSMemoryDBClusterConfig'
    }

    attribute_map = {
        'aws_vpc_id': 'aws_vpc_id',
        'aws_subnet_ids_with_availability_zones': 'aws_subnet_ids_with_availability_zones',
        'aws_iam_role_arns': 'aws_iam_role_arns',
        'aws_security_groups': 'aws_security_groups',
        'aws_s3_id': 'aws_s3_id',
        'aws_efs_id': 'aws_efs_id',
        'aws_efs_mount_target_ip': 'aws_efs_mount_target_ip',
        'aws_cloudformation_stack_id': 'aws_cloudformation_stack_id',
        'gcp_vpc_id': 'gcp_vpc_id',
        'gcp_subnet_ids': 'gcp_subnet_ids',
        'memorydb_cluster_config': 'memorydb_cluster_config'
    }

    def __init__(self, aws_vpc_id=None, aws_subnet_ids_with_availability_zones=None, aws_iam_role_arns=None, aws_security_groups=None, aws_s3_id=None, aws_efs_id=None, aws_efs_mount_target_ip=None, aws_cloudformation_stack_id=None, gcp_vpc_id=None, gcp_subnet_ids=None, memorydb_cluster_config=None, local_vars_configuration=None):  # noqa: E501
        """CreateCloudResource - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aws_vpc_id = None
        self._aws_subnet_ids_with_availability_zones = None
        self._aws_iam_role_arns = None
        self._aws_security_groups = None
        self._aws_s3_id = None
        self._aws_efs_id = None
        self._aws_efs_mount_target_ip = None
        self._aws_cloudformation_stack_id = None
        self._gcp_vpc_id = None
        self._gcp_subnet_ids = None
        self._memorydb_cluster_config = None
        self.discriminator = None

        if aws_vpc_id is not None:
            self.aws_vpc_id = aws_vpc_id
        if aws_subnet_ids_with_availability_zones is not None:
            self.aws_subnet_ids_with_availability_zones = aws_subnet_ids_with_availability_zones
        if aws_iam_role_arns is not None:
            self.aws_iam_role_arns = aws_iam_role_arns
        if aws_security_groups is not None:
            self.aws_security_groups = aws_security_groups
        if aws_s3_id is not None:
            self.aws_s3_id = aws_s3_id
        if aws_efs_id is not None:
            self.aws_efs_id = aws_efs_id
        if aws_efs_mount_target_ip is not None:
            self.aws_efs_mount_target_ip = aws_efs_mount_target_ip
        if aws_cloudformation_stack_id is not None:
            self.aws_cloudformation_stack_id = aws_cloudformation_stack_id
        if gcp_vpc_id is not None:
            self.gcp_vpc_id = gcp_vpc_id
        if gcp_subnet_ids is not None:
            self.gcp_subnet_ids = gcp_subnet_ids
        if memorydb_cluster_config is not None:
            self.memorydb_cluster_config = memorydb_cluster_config

    @property
    def aws_vpc_id(self):
        """Gets the aws_vpc_id of this CreateCloudResource.  # noqa: E501

        The AWS vpc id of this cloud.  # noqa: E501

        :return: The aws_vpc_id of this CreateCloudResource.  # noqa: E501
        :rtype: str
        """
        return self._aws_vpc_id

    @aws_vpc_id.setter
    def aws_vpc_id(self, aws_vpc_id):
        """Sets the aws_vpc_id of this CreateCloudResource.

        The AWS vpc id of this cloud.  # noqa: E501

        :param aws_vpc_id: The aws_vpc_id of this CreateCloudResource.  # noqa: E501
        :type: str
        """

        self._aws_vpc_id = aws_vpc_id

    @property
    def aws_subnet_ids_with_availability_zones(self):
        """Gets the aws_subnet_ids_with_availability_zones of this CreateCloudResource.  # noqa: E501

        A list of AWS subnet IDs with its availability zone of this cloud.  # noqa: E501

        :return: The aws_subnet_ids_with_availability_zones of this CreateCloudResource.  # noqa: E501
        :rtype: list[SubnetIdWithAvailabilityZoneAWS]
        """
        return self._aws_subnet_ids_with_availability_zones

    @aws_subnet_ids_with_availability_zones.setter
    def aws_subnet_ids_with_availability_zones(self, aws_subnet_ids_with_availability_zones):
        """Sets the aws_subnet_ids_with_availability_zones of this CreateCloudResource.

        A list of AWS subnet IDs with its availability zone of this cloud.  # noqa: E501

        :param aws_subnet_ids_with_availability_zones: The aws_subnet_ids_with_availability_zones of this CreateCloudResource.  # noqa: E501
        :type: list[SubnetIdWithAvailabilityZoneAWS]
        """

        self._aws_subnet_ids_with_availability_zones = aws_subnet_ids_with_availability_zones

    @property
    def aws_iam_role_arns(self):
        """Gets the aws_iam_role_arns of this CreateCloudResource.  # noqa: E501

        A list of 2 AWS IAM role arns of this cloud (the IAM role Anyscale uses to access this cloud & the IAM role assigned to nodes in the cluster).  # noqa: E501

        :return: The aws_iam_role_arns of this CreateCloudResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._aws_iam_role_arns

    @aws_iam_role_arns.setter
    def aws_iam_role_arns(self, aws_iam_role_arns):
        """Sets the aws_iam_role_arns of this CreateCloudResource.

        A list of 2 AWS IAM role arns of this cloud (the IAM role Anyscale uses to access this cloud & the IAM role assigned to nodes in the cluster).  # noqa: E501

        :param aws_iam_role_arns: The aws_iam_role_arns of this CreateCloudResource.  # noqa: E501
        :type: list[str]
        """

        self._aws_iam_role_arns = aws_iam_role_arns

    @property
    def aws_security_groups(self):
        """Gets the aws_security_groups of this CreateCloudResource.  # noqa: E501

        A list of AWS security groups of this cloud.  # noqa: E501

        :return: The aws_security_groups of this CreateCloudResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._aws_security_groups

    @aws_security_groups.setter
    def aws_security_groups(self, aws_security_groups):
        """Sets the aws_security_groups of this CreateCloudResource.

        A list of AWS security groups of this cloud.  # noqa: E501

        :param aws_security_groups: The aws_security_groups of this CreateCloudResource.  # noqa: E501
        :type: list[str]
        """

        self._aws_security_groups = aws_security_groups

    @property
    def aws_s3_id(self):
        """Gets the aws_s3_id of this CreateCloudResource.  # noqa: E501

        The AWS S3 id of this cloud.  # noqa: E501

        :return: The aws_s3_id of this CreateCloudResource.  # noqa: E501
        :rtype: str
        """
        return self._aws_s3_id

    @aws_s3_id.setter
    def aws_s3_id(self, aws_s3_id):
        """Sets the aws_s3_id of this CreateCloudResource.

        The AWS S3 id of this cloud.  # noqa: E501

        :param aws_s3_id: The aws_s3_id of this CreateCloudResource.  # noqa: E501
        :type: str
        """

        self._aws_s3_id = aws_s3_id

    @property
    def aws_efs_id(self):
        """Gets the aws_efs_id of this CreateCloudResource.  # noqa: E501

        The AWS EFS id of this cloud.  # noqa: E501

        :return: The aws_efs_id of this CreateCloudResource.  # noqa: E501
        :rtype: str
        """
        return self._aws_efs_id

    @aws_efs_id.setter
    def aws_efs_id(self, aws_efs_id):
        """Sets the aws_efs_id of this CreateCloudResource.

        The AWS EFS id of this cloud.  # noqa: E501

        :param aws_efs_id: The aws_efs_id of this CreateCloudResource.  # noqa: E501
        :type: str
        """

        self._aws_efs_id = aws_efs_id

    @property
    def aws_efs_mount_target_ip(self):
        """Gets the aws_efs_mount_target_ip of this CreateCloudResource.  # noqa: E501

        The AWS EFS mount target IP of this cloud.  # noqa: E501

        :return: The aws_efs_mount_target_ip of this CreateCloudResource.  # noqa: E501
        :rtype: str
        """
        return self._aws_efs_mount_target_ip

    @aws_efs_mount_target_ip.setter
    def aws_efs_mount_target_ip(self, aws_efs_mount_target_ip):
        """Sets the aws_efs_mount_target_ip of this CreateCloudResource.

        The AWS EFS mount target IP of this cloud.  # noqa: E501

        :param aws_efs_mount_target_ip: The aws_efs_mount_target_ip of this CreateCloudResource.  # noqa: E501
        :type: str
        """

        self._aws_efs_mount_target_ip = aws_efs_mount_target_ip

    @property
    def aws_cloudformation_stack_id(self):
        """Gets the aws_cloudformation_stack_id of this CreateCloudResource.  # noqa: E501

        The AWS CloudFormation stack id of this cloud.  # noqa: E501

        :return: The aws_cloudformation_stack_id of this CreateCloudResource.  # noqa: E501
        :rtype: str
        """
        return self._aws_cloudformation_stack_id

    @aws_cloudformation_stack_id.setter
    def aws_cloudformation_stack_id(self, aws_cloudformation_stack_id):
        """Sets the aws_cloudformation_stack_id of this CreateCloudResource.

        The AWS CloudFormation stack id of this cloud.  # noqa: E501

        :param aws_cloudformation_stack_id: The aws_cloudformation_stack_id of this CreateCloudResource.  # noqa: E501
        :type: str
        """

        self._aws_cloudformation_stack_id = aws_cloudformation_stack_id

    @property
    def gcp_vpc_id(self):
        """Gets the gcp_vpc_id of this CreateCloudResource.  # noqa: E501

        The GCP vpc id of this cloud.  # noqa: E501

        :return: The gcp_vpc_id of this CreateCloudResource.  # noqa: E501
        :rtype: str
        """
        return self._gcp_vpc_id

    @gcp_vpc_id.setter
    def gcp_vpc_id(self, gcp_vpc_id):
        """Sets the gcp_vpc_id of this CreateCloudResource.

        The GCP vpc id of this cloud.  # noqa: E501

        :param gcp_vpc_id: The gcp_vpc_id of this CreateCloudResource.  # noqa: E501
        :type: str
        """

        self._gcp_vpc_id = gcp_vpc_id

    @property
    def gcp_subnet_ids(self):
        """Gets the gcp_subnet_ids of this CreateCloudResource.  # noqa: E501

        A list of GCP subnet IDs of this cloud.  # noqa: E501

        :return: The gcp_subnet_ids of this CreateCloudResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._gcp_subnet_ids

    @gcp_subnet_ids.setter
    def gcp_subnet_ids(self, gcp_subnet_ids):
        """Sets the gcp_subnet_ids of this CreateCloudResource.

        A list of GCP subnet IDs of this cloud.  # noqa: E501

        :param gcp_subnet_ids: The gcp_subnet_ids of this CreateCloudResource.  # noqa: E501
        :type: list[str]
        """

        self._gcp_subnet_ids = gcp_subnet_ids

    @property
    def memorydb_cluster_config(self):
        """Gets the memorydb_cluster_config of this CreateCloudResource.  # noqa: E501

        The AWS memorydb cluster config of this cloud.  # noqa: E501

        :return: The memorydb_cluster_config of this CreateCloudResource.  # noqa: E501
        :rtype: AWSMemoryDBClusterConfig
        """
        return self._memorydb_cluster_config

    @memorydb_cluster_config.setter
    def memorydb_cluster_config(self, memorydb_cluster_config):
        """Sets the memorydb_cluster_config of this CreateCloudResource.

        The AWS memorydb cluster config of this cloud.  # noqa: E501

        :param memorydb_cluster_config: The memorydb_cluster_config of this CreateCloudResource.  # noqa: E501
        :type: AWSMemoryDBClusterConfig
        """

        self._memorydb_cluster_config = memorydb_cluster_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCloudResource):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateCloudResource):
            return True

        return self.to_dict() != other.to_dict()
