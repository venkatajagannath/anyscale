# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SocketMessageSchemas(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_create_message': 'ProjectCreateMessage',
        'project_delete_message': 'ProjectDeleteMessage',
        'project_patch_message': 'ProjectPatchMessage',
        'session_autosync_sessions_update_message': 'SessionAutosyncSessionsUpdateMessage',
        'session_create_message': 'SessionCreateMessage',
        'session_patch_message': 'SessionPatchMessage',
        'session_delete_message': 'SessionDeleteMessage',
        'session_execute_message': 'SessionExecuteMessage',
        'session_state_change_message': 'SessionStateChangeMessage',
        'session_kill_command_message': 'SessionKillCommandMessage',
        'session_finish_command_message': 'SessionFinishCommandMessage',
        'snapshot_create_message': 'SnapshotCreateMessage',
        'snapshot_delete_message': 'SnapshotDeleteMessage',
        'snapshot_patch_message': 'SnapshotPatchMessage',
        'project_collaborators_put_message': 'ProjectCollaboratorsPutMessage'
    }

    attribute_map = {
        'project_create_message': 'ProjectCreateMessage',
        'project_delete_message': 'ProjectDeleteMessage',
        'project_patch_message': 'ProjectPatchMessage',
        'session_autosync_sessions_update_message': 'SessionAutosyncSessionsUpdateMessage',
        'session_create_message': 'SessionCreateMessage',
        'session_patch_message': 'SessionPatchMessage',
        'session_delete_message': 'SessionDeleteMessage',
        'session_execute_message': 'SessionExecuteMessage',
        'session_state_change_message': 'SessionStateChangeMessage',
        'session_kill_command_message': 'SessionKillCommandMessage',
        'session_finish_command_message': 'SessionFinishCommandMessage',
        'snapshot_create_message': 'SnapshotCreateMessage',
        'snapshot_delete_message': 'SnapshotDeleteMessage',
        'snapshot_patch_message': 'SnapshotPatchMessage',
        'project_collaborators_put_message': 'ProjectCollaboratorsPutMessage'
    }

    def __init__(self, project_create_message=None, project_delete_message=None, project_patch_message=None, session_autosync_sessions_update_message=None, session_create_message=None, session_patch_message=None, session_delete_message=None, session_execute_message=None, session_state_change_message=None, session_kill_command_message=None, session_finish_command_message=None, snapshot_create_message=None, snapshot_delete_message=None, snapshot_patch_message=None, project_collaborators_put_message=None, local_vars_configuration=None):  # noqa: E501
        """SocketMessageSchemas - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_create_message = None
        self._project_delete_message = None
        self._project_patch_message = None
        self._session_autosync_sessions_update_message = None
        self._session_create_message = None
        self._session_patch_message = None
        self._session_delete_message = None
        self._session_execute_message = None
        self._session_state_change_message = None
        self._session_kill_command_message = None
        self._session_finish_command_message = None
        self._snapshot_create_message = None
        self._snapshot_delete_message = None
        self._snapshot_patch_message = None
        self._project_collaborators_put_message = None
        self.discriminator = None

        self.project_create_message = project_create_message
        self.project_delete_message = project_delete_message
        self.project_patch_message = project_patch_message
        self.session_autosync_sessions_update_message = session_autosync_sessions_update_message
        self.session_create_message = session_create_message
        self.session_patch_message = session_patch_message
        self.session_delete_message = session_delete_message
        self.session_execute_message = session_execute_message
        self.session_state_change_message = session_state_change_message
        self.session_kill_command_message = session_kill_command_message
        self.session_finish_command_message = session_finish_command_message
        self.snapshot_create_message = snapshot_create_message
        self.snapshot_delete_message = snapshot_delete_message
        self.snapshot_patch_message = snapshot_patch_message
        self.project_collaborators_put_message = project_collaborators_put_message

    @property
    def project_create_message(self):
        """Gets the project_create_message of this SocketMessageSchemas.  # noqa: E501


        :return: The project_create_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: ProjectCreateMessage
        """
        return self._project_create_message

    @project_create_message.setter
    def project_create_message(self, project_create_message):
        """Sets the project_create_message of this SocketMessageSchemas.


        :param project_create_message: The project_create_message of this SocketMessageSchemas.  # noqa: E501
        :type: ProjectCreateMessage
        """
        if self.local_vars_configuration.client_side_validation and project_create_message is None:  # noqa: E501
            raise ValueError("Invalid value for `project_create_message`, must not be `None`")  # noqa: E501

        self._project_create_message = project_create_message

    @property
    def project_delete_message(self):
        """Gets the project_delete_message of this SocketMessageSchemas.  # noqa: E501


        :return: The project_delete_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: ProjectDeleteMessage
        """
        return self._project_delete_message

    @project_delete_message.setter
    def project_delete_message(self, project_delete_message):
        """Sets the project_delete_message of this SocketMessageSchemas.


        :param project_delete_message: The project_delete_message of this SocketMessageSchemas.  # noqa: E501
        :type: ProjectDeleteMessage
        """
        if self.local_vars_configuration.client_side_validation and project_delete_message is None:  # noqa: E501
            raise ValueError("Invalid value for `project_delete_message`, must not be `None`")  # noqa: E501

        self._project_delete_message = project_delete_message

    @property
    def project_patch_message(self):
        """Gets the project_patch_message of this SocketMessageSchemas.  # noqa: E501


        :return: The project_patch_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: ProjectPatchMessage
        """
        return self._project_patch_message

    @project_patch_message.setter
    def project_patch_message(self, project_patch_message):
        """Sets the project_patch_message of this SocketMessageSchemas.


        :param project_patch_message: The project_patch_message of this SocketMessageSchemas.  # noqa: E501
        :type: ProjectPatchMessage
        """
        if self.local_vars_configuration.client_side_validation and project_patch_message is None:  # noqa: E501
            raise ValueError("Invalid value for `project_patch_message`, must not be `None`")  # noqa: E501

        self._project_patch_message = project_patch_message

    @property
    def session_autosync_sessions_update_message(self):
        """Gets the session_autosync_sessions_update_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_autosync_sessions_update_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionAutosyncSessionsUpdateMessage
        """
        return self._session_autosync_sessions_update_message

    @session_autosync_sessions_update_message.setter
    def session_autosync_sessions_update_message(self, session_autosync_sessions_update_message):
        """Sets the session_autosync_sessions_update_message of this SocketMessageSchemas.


        :param session_autosync_sessions_update_message: The session_autosync_sessions_update_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionAutosyncSessionsUpdateMessage
        """
        if self.local_vars_configuration.client_side_validation and session_autosync_sessions_update_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_autosync_sessions_update_message`, must not be `None`")  # noqa: E501

        self._session_autosync_sessions_update_message = session_autosync_sessions_update_message

    @property
    def session_create_message(self):
        """Gets the session_create_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_create_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionCreateMessage
        """
        return self._session_create_message

    @session_create_message.setter
    def session_create_message(self, session_create_message):
        """Sets the session_create_message of this SocketMessageSchemas.


        :param session_create_message: The session_create_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionCreateMessage
        """
        if self.local_vars_configuration.client_side_validation and session_create_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_create_message`, must not be `None`")  # noqa: E501

        self._session_create_message = session_create_message

    @property
    def session_patch_message(self):
        """Gets the session_patch_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_patch_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionPatchMessage
        """
        return self._session_patch_message

    @session_patch_message.setter
    def session_patch_message(self, session_patch_message):
        """Sets the session_patch_message of this SocketMessageSchemas.


        :param session_patch_message: The session_patch_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionPatchMessage
        """
        if self.local_vars_configuration.client_side_validation and session_patch_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_patch_message`, must not be `None`")  # noqa: E501

        self._session_patch_message = session_patch_message

    @property
    def session_delete_message(self):
        """Gets the session_delete_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_delete_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionDeleteMessage
        """
        return self._session_delete_message

    @session_delete_message.setter
    def session_delete_message(self, session_delete_message):
        """Sets the session_delete_message of this SocketMessageSchemas.


        :param session_delete_message: The session_delete_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionDeleteMessage
        """
        if self.local_vars_configuration.client_side_validation and session_delete_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_delete_message`, must not be `None`")  # noqa: E501

        self._session_delete_message = session_delete_message

    @property
    def session_execute_message(self):
        """Gets the session_execute_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_execute_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionExecuteMessage
        """
        return self._session_execute_message

    @session_execute_message.setter
    def session_execute_message(self, session_execute_message):
        """Sets the session_execute_message of this SocketMessageSchemas.


        :param session_execute_message: The session_execute_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionExecuteMessage
        """
        if self.local_vars_configuration.client_side_validation and session_execute_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_execute_message`, must not be `None`")  # noqa: E501

        self._session_execute_message = session_execute_message

    @property
    def session_state_change_message(self):
        """Gets the session_state_change_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_state_change_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionStateChangeMessage
        """
        return self._session_state_change_message

    @session_state_change_message.setter
    def session_state_change_message(self, session_state_change_message):
        """Sets the session_state_change_message of this SocketMessageSchemas.


        :param session_state_change_message: The session_state_change_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionStateChangeMessage
        """
        if self.local_vars_configuration.client_side_validation and session_state_change_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_state_change_message`, must not be `None`")  # noqa: E501

        self._session_state_change_message = session_state_change_message

    @property
    def session_kill_command_message(self):
        """Gets the session_kill_command_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_kill_command_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionKillCommandMessage
        """
        return self._session_kill_command_message

    @session_kill_command_message.setter
    def session_kill_command_message(self, session_kill_command_message):
        """Sets the session_kill_command_message of this SocketMessageSchemas.


        :param session_kill_command_message: The session_kill_command_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionKillCommandMessage
        """
        if self.local_vars_configuration.client_side_validation and session_kill_command_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_kill_command_message`, must not be `None`")  # noqa: E501

        self._session_kill_command_message = session_kill_command_message

    @property
    def session_finish_command_message(self):
        """Gets the session_finish_command_message of this SocketMessageSchemas.  # noqa: E501


        :return: The session_finish_command_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SessionFinishCommandMessage
        """
        return self._session_finish_command_message

    @session_finish_command_message.setter
    def session_finish_command_message(self, session_finish_command_message):
        """Sets the session_finish_command_message of this SocketMessageSchemas.


        :param session_finish_command_message: The session_finish_command_message of this SocketMessageSchemas.  # noqa: E501
        :type: SessionFinishCommandMessage
        """
        if self.local_vars_configuration.client_side_validation and session_finish_command_message is None:  # noqa: E501
            raise ValueError("Invalid value for `session_finish_command_message`, must not be `None`")  # noqa: E501

        self._session_finish_command_message = session_finish_command_message

    @property
    def snapshot_create_message(self):
        """Gets the snapshot_create_message of this SocketMessageSchemas.  # noqa: E501


        :return: The snapshot_create_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SnapshotCreateMessage
        """
        return self._snapshot_create_message

    @snapshot_create_message.setter
    def snapshot_create_message(self, snapshot_create_message):
        """Sets the snapshot_create_message of this SocketMessageSchemas.


        :param snapshot_create_message: The snapshot_create_message of this SocketMessageSchemas.  # noqa: E501
        :type: SnapshotCreateMessage
        """
        if self.local_vars_configuration.client_side_validation and snapshot_create_message is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_create_message`, must not be `None`")  # noqa: E501

        self._snapshot_create_message = snapshot_create_message

    @property
    def snapshot_delete_message(self):
        """Gets the snapshot_delete_message of this SocketMessageSchemas.  # noqa: E501


        :return: The snapshot_delete_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SnapshotDeleteMessage
        """
        return self._snapshot_delete_message

    @snapshot_delete_message.setter
    def snapshot_delete_message(self, snapshot_delete_message):
        """Sets the snapshot_delete_message of this SocketMessageSchemas.


        :param snapshot_delete_message: The snapshot_delete_message of this SocketMessageSchemas.  # noqa: E501
        :type: SnapshotDeleteMessage
        """
        if self.local_vars_configuration.client_side_validation and snapshot_delete_message is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_delete_message`, must not be `None`")  # noqa: E501

        self._snapshot_delete_message = snapshot_delete_message

    @property
    def snapshot_patch_message(self):
        """Gets the snapshot_patch_message of this SocketMessageSchemas.  # noqa: E501


        :return: The snapshot_patch_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: SnapshotPatchMessage
        """
        return self._snapshot_patch_message

    @snapshot_patch_message.setter
    def snapshot_patch_message(self, snapshot_patch_message):
        """Sets the snapshot_patch_message of this SocketMessageSchemas.


        :param snapshot_patch_message: The snapshot_patch_message of this SocketMessageSchemas.  # noqa: E501
        :type: SnapshotPatchMessage
        """
        if self.local_vars_configuration.client_side_validation and snapshot_patch_message is None:  # noqa: E501
            raise ValueError("Invalid value for `snapshot_patch_message`, must not be `None`")  # noqa: E501

        self._snapshot_patch_message = snapshot_patch_message

    @property
    def project_collaborators_put_message(self):
        """Gets the project_collaborators_put_message of this SocketMessageSchemas.  # noqa: E501


        :return: The project_collaborators_put_message of this SocketMessageSchemas.  # noqa: E501
        :rtype: ProjectCollaboratorsPutMessage
        """
        return self._project_collaborators_put_message

    @project_collaborators_put_message.setter
    def project_collaborators_put_message(self, project_collaborators_put_message):
        """Sets the project_collaborators_put_message of this SocketMessageSchemas.


        :param project_collaborators_put_message: The project_collaborators_put_message of this SocketMessageSchemas.  # noqa: E501
        :type: ProjectCollaboratorsPutMessage
        """
        if self.local_vars_configuration.client_side_validation and project_collaborators_put_message is None:  # noqa: E501
            raise ValueError("Invalid value for `project_collaborators_put_message`, must not be `None`")  # noqa: E501

        self._project_collaborators_put_message = project_collaborators_put_message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SocketMessageSchemas):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SocketMessageSchemas):
            return True

        return self.to_dict() != other.to_dict()
