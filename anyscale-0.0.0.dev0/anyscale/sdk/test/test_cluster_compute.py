# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import anyscale_client
from anyscale_client.models.cluster_compute import ClusterCompute  # noqa: E501
from anyscale_client.rest import ApiException

class TestClusterCompute(unittest.TestCase):
    """ClusterCompute unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ClusterCompute
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = anyscale_client.models.cluster_compute.ClusterCompute()  # noqa: E501
        if include_optional :
            return ClusterCompute(
                id = '0', 
                name = '0', 
                creator_id = '0', 
                organization_id = '0', 
                project_id = '0', 
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                last_modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                deleted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                config = anyscale_client.models.cluster_compute_config.ClusterComputeConfig(
                    cloud_id = '0', 
                    max_workers = 56, 
                    region = '0', 
                    allowed_azs = [
                        '0'
                        ], 
                    head_node_type = null, 
                    worker_node_types = [
                        anyscale_client.models.worker_node_type.WorkerNodeType(
                            name = '0', 
                            instance_type = '0', 
                            resources = null, 
                            aws_advanced_configurations = null, 
                            gcp_advanced_configurations = null, 
                            min_workers = 56, 
                            max_workers = 56, 
                            use_spot = True, )
                        ], 
                    aws = null, 
                    gcp = null, 
                    azure = null, 
                    maximum_uptime_minutes = 56, )
            )
        else :
            return ClusterCompute(
                id = '0',
                name = '0',
                creator_id = '0',
                organization_id = '0',
                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                last_modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                config = anyscale_client.models.cluster_compute_config.ClusterComputeConfig(
                    cloud_id = '0', 
                    max_workers = 56, 
                    region = '0', 
                    allowed_azs = [
                        '0'
                        ], 
                    head_node_type = null, 
                    worker_node_types = [
                        anyscale_client.models.worker_node_type.WorkerNodeType(
                            name = '0', 
                            instance_type = '0', 
                            resources = null, 
                            aws_advanced_configurations = null, 
                            gcp_advanced_configurations = null, 
                            min_workers = 56, 
                            max_workers = 56, 
                            use_spot = True, )
                        ], 
                    aws = null, 
                    gcp = null, 
                    azure = null, 
                    maximum_uptime_minutes = 56, ),
        )

    def testClusterCompute(self):
        """Test ClusterCompute"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
