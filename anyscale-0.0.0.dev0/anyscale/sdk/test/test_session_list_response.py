# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import anyscale_client
from anyscale_client.models.session_list_response import SessionListResponse  # noqa: E501
from anyscale_client.rest import ApiException

class TestSessionListResponse(unittest.TestCase):
    """SessionListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SessionListResponse
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = anyscale_client.models.session_list_response.SessionListResponse()  # noqa: E501
        if include_optional :
            return SessionListResponse(
                results = [
                    anyscale_client.models.session.Session(
                        name = '0', 
                        project_id = '0', 
                        cloud_id = '0', 
                        cluster_config = '0', 
                        build_id = '0', 
                        compute_template_id = '0', 
                        idle_timeout = 56, 
                        uses_app_config = True, 
                        allow_public_internet_traffic = True, 
                        user_service_access = null, 
                        user_service_token = '0', 
                        ha_job_id = '0', 
                        id = '0', 
                        state = null, 
                        pending_state = null, 
                        state_data = null, 
                        creator_id = '0', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        archived_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        webterminal_auth_url = '0', 
                        metrics_dashboard_url = '0', 
                        persistent_metrics_url = '0', 
                        connect_url = '0', 
                        jupyter_notebook_url = '0', 
                        ray_dashboard_url = '0', 
                        access_token = '0', 
                        service_proxy_url = '0', 
                        tensorboard_available = True, 
                        cluster_config_last_modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        host_name = '0', 
                        head_node_ip = '0', 
                        ssh_authorized_keys = [
                            '0'
                            ], 
                        ssh_private_key = '0', 
                        anyscaled_config = '0', 
                        anyscaled_config_generated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        default_build_id = '0', 
                        idle_timeout_last_activity_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        ray_version = '0', 
                        ray_version_last_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user_service_url = '0', 
                        ray_component_activities_last_reported_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        activity_details = anyscale_client.models.activity_details.Activity Details(), 
                        maximum_uptime_will_terminate_cluster_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        idle_termination_status = null, 
                        ray_dashboard_snapshot_last_reported_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ], 
                metadata = null
            )
        else :
            return SessionListResponse(
                results = [
                    anyscale_client.models.session.Session(
                        name = '0', 
                        project_id = '0', 
                        cloud_id = '0', 
                        cluster_config = '0', 
                        build_id = '0', 
                        compute_template_id = '0', 
                        idle_timeout = 56, 
                        uses_app_config = True, 
                        allow_public_internet_traffic = True, 
                        user_service_access = null, 
                        user_service_token = '0', 
                        ha_job_id = '0', 
                        id = '0', 
                        state = null, 
                        pending_state = null, 
                        state_data = null, 
                        creator_id = '0', 
                        created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        archived_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        webterminal_auth_url = '0', 
                        metrics_dashboard_url = '0', 
                        persistent_metrics_url = '0', 
                        connect_url = '0', 
                        jupyter_notebook_url = '0', 
                        ray_dashboard_url = '0', 
                        access_token = '0', 
                        service_proxy_url = '0', 
                        tensorboard_available = True, 
                        cluster_config_last_modified_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        host_name = '0', 
                        head_node_ip = '0', 
                        ssh_authorized_keys = [
                            '0'
                            ], 
                        ssh_private_key = '0', 
                        anyscaled_config = '0', 
                        anyscaled_config_generated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        default_build_id = '0', 
                        idle_timeout_last_activity_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        ray_version = '0', 
                        ray_version_last_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        user_service_url = '0', 
                        ray_component_activities_last_reported_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        activity_details = anyscale_client.models.activity_details.Activity Details(), 
                        maximum_uptime_will_terminate_cluster_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        idle_termination_status = null, 
                        ray_dashboard_snapshot_last_reported_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                    ],
        )

    def testSessionListResponse(self):
        """Test SessionListResponse"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
