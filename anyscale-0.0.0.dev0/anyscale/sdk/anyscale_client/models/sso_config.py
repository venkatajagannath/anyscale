# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class SSOConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'idp_metadata_url': 'str',
        'static_idp_config': 'StaticSSOConfig',
        'id': 'str',
        'created_at': 'datetime',
        'creator_id': 'str'
    }

    attribute_map = {
        'idp_metadata_url': 'idp_metadata_url',
        'static_idp_config': 'static_idp_config',
        'id': 'id',
        'created_at': 'created_at',
        'creator_id': 'creator_id'
    }

    def __init__(self, idp_metadata_url=None, static_idp_config=None, id=None, created_at=None, creator_id=None, local_vars_configuration=None):  # noqa: E501
        """SSOConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._idp_metadata_url = None
        self._static_idp_config = None
        self._id = None
        self._created_at = None
        self._creator_id = None
        self.discriminator = None

        if idp_metadata_url is not None:
            self.idp_metadata_url = idp_metadata_url
        if static_idp_config is not None:
            self.static_idp_config = static_idp_config
        self.id = id
        self.created_at = created_at
        self.creator_id = creator_id

    @property
    def idp_metadata_url(self):
        """Gets the idp_metadata_url of this SSOConfig.  # noqa: E501

        Identity provider (IdP) metadata url. If given along with the other static identity provider fields, Anyscale will first attempt metadata exchange to get IdP attributes. If Anyscale can't reach the metadata endpoint or if the metadata url isn't given, Anyscale will use static_idp_config as a backup. Either idp_metadata_url or static_idp_config is required.  # noqa: E501

        :return: The idp_metadata_url of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._idp_metadata_url

    @idp_metadata_url.setter
    def idp_metadata_url(self, idp_metadata_url):
        """Sets the idp_metadata_url of this SSOConfig.

        Identity provider (IdP) metadata url. If given along with the other static identity provider fields, Anyscale will first attempt metadata exchange to get IdP attributes. If Anyscale can't reach the metadata endpoint or if the metadata url isn't given, Anyscale will use static_idp_config as a backup. Either idp_metadata_url or static_idp_config is required.  # noqa: E501

        :param idp_metadata_url: The idp_metadata_url of this SSOConfig.  # noqa: E501
        :type: str
        """

        self._idp_metadata_url = idp_metadata_url

    @property
    def static_idp_config(self):
        """Gets the static_idp_config of this SSOConfig.  # noqa: E501

        Static identity provider configuration.  # noqa: E501

        :return: The static_idp_config of this SSOConfig.  # noqa: E501
        :rtype: StaticSSOConfig
        """
        return self._static_idp_config

    @static_idp_config.setter
    def static_idp_config(self, static_idp_config):
        """Sets the static_idp_config of this SSOConfig.

        Static identity provider configuration.  # noqa: E501

        :param static_idp_config: The static_idp_config of this SSOConfig.  # noqa: E501
        :type: StaticSSOConfig
        """

        self._static_idp_config = static_idp_config

    @property
    def id(self):
        """Gets the id of this SSOConfig.  # noqa: E501

        ID of this SSO Config.  # noqa: E501

        :return: The id of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SSOConfig.

        ID of this SSO Config.  # noqa: E501

        :param id: The id of this SSOConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this SSOConfig.  # noqa: E501

        Time at which this SSO Config was created.  # noqa: E501

        :return: The created_at of this SSOConfig.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this SSOConfig.

        Time at which this SSO Config was created.  # noqa: E501

        :param created_at: The created_at of this SSOConfig.  # noqa: E501
        :type: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_at is None:  # noqa: E501
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def creator_id(self):
        """Gets the creator_id of this SSOConfig.  # noqa: E501

        ID of the user who created this SSO Config.  # noqa: E501

        :return: The creator_id of this SSOConfig.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this SSOConfig.

        ID of the user who created this SSO Config.  # noqa: E501

        :param creator_id: The creator_id of this SSOConfig.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and creator_id is None:  # noqa: E501
            raise ValueError("Invalid value for `creator_id`, must not be `None`")  # noqa: E501

        self._creator_id = creator_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SSOConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SSOConfig):
            return True

        return self.to_dict() != other.to_dict()
