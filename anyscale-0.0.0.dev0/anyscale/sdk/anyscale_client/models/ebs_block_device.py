# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class EbsBlockDevice(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'delete_on_termination': 'bool',
        'encrypted': 'bool',
        'iops': 'int',
        'kms_key_id': 'str',
        'outpost_arn': 'str',
        'snapshot_id': 'str',
        'throughput': 'int',
        'volume_size': 'int',
        'volume_type': 'str'
    }

    attribute_map = {
        'delete_on_termination': 'DeleteOnTermination',
        'encrypted': 'Encrypted',
        'iops': 'Iops',
        'kms_key_id': 'KmsKeyId',
        'outpost_arn': 'OutpostArn',
        'snapshot_id': 'SnapshotId',
        'throughput': 'Throughput',
        'volume_size': 'VolumeSize',
        'volume_type': 'VolumeType'
    }

    def __init__(self, delete_on_termination=None, encrypted=None, iops=None, kms_key_id=None, outpost_arn=None, snapshot_id=None, throughput=None, volume_size=None, volume_type=None, local_vars_configuration=None):  # noqa: E501
        """EbsBlockDevice - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._delete_on_termination = None
        self._encrypted = None
        self._iops = None
        self._kms_key_id = None
        self._outpost_arn = None
        self._snapshot_id = None
        self._throughput = None
        self._volume_size = None
        self._volume_type = None
        self.discriminator = None

        if delete_on_termination is not None:
            self.delete_on_termination = delete_on_termination
        if encrypted is not None:
            self.encrypted = encrypted
        if iops is not None:
            self.iops = iops
        if kms_key_id is not None:
            self.kms_key_id = kms_key_id
        if outpost_arn is not None:
            self.outpost_arn = outpost_arn
        if snapshot_id is not None:
            self.snapshot_id = snapshot_id
        if throughput is not None:
            self.throughput = throughput
        if volume_size is not None:
            self.volume_size = volume_size
        if volume_type is not None:
            self.volume_type = volume_type

    @property
    def delete_on_termination(self):
        """Gets the delete_on_termination of this EbsBlockDevice.  # noqa: E501


        :return: The delete_on_termination of this EbsBlockDevice.  # noqa: E501
        :rtype: bool
        """
        return self._delete_on_termination

    @delete_on_termination.setter
    def delete_on_termination(self, delete_on_termination):
        """Sets the delete_on_termination of this EbsBlockDevice.


        :param delete_on_termination: The delete_on_termination of this EbsBlockDevice.  # noqa: E501
        :type: bool
        """

        self._delete_on_termination = delete_on_termination

    @property
    def encrypted(self):
        """Gets the encrypted of this EbsBlockDevice.  # noqa: E501


        :return: The encrypted of this EbsBlockDevice.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this EbsBlockDevice.


        :param encrypted: The encrypted of this EbsBlockDevice.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def iops(self):
        """Gets the iops of this EbsBlockDevice.  # noqa: E501


        :return: The iops of this EbsBlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._iops

    @iops.setter
    def iops(self, iops):
        """Sets the iops of this EbsBlockDevice.


        :param iops: The iops of this EbsBlockDevice.  # noqa: E501
        :type: int
        """

        self._iops = iops

    @property
    def kms_key_id(self):
        """Gets the kms_key_id of this EbsBlockDevice.  # noqa: E501


        :return: The kms_key_id of this EbsBlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._kms_key_id

    @kms_key_id.setter
    def kms_key_id(self, kms_key_id):
        """Sets the kms_key_id of this EbsBlockDevice.


        :param kms_key_id: The kms_key_id of this EbsBlockDevice.  # noqa: E501
        :type: str
        """

        self._kms_key_id = kms_key_id

    @property
    def outpost_arn(self):
        """Gets the outpost_arn of this EbsBlockDevice.  # noqa: E501


        :return: The outpost_arn of this EbsBlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._outpost_arn

    @outpost_arn.setter
    def outpost_arn(self, outpost_arn):
        """Sets the outpost_arn of this EbsBlockDevice.


        :param outpost_arn: The outpost_arn of this EbsBlockDevice.  # noqa: E501
        :type: str
        """

        self._outpost_arn = outpost_arn

    @property
    def snapshot_id(self):
        """Gets the snapshot_id of this EbsBlockDevice.  # noqa: E501


        :return: The snapshot_id of this EbsBlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_id

    @snapshot_id.setter
    def snapshot_id(self, snapshot_id):
        """Sets the snapshot_id of this EbsBlockDevice.


        :param snapshot_id: The snapshot_id of this EbsBlockDevice.  # noqa: E501
        :type: str
        """

        self._snapshot_id = snapshot_id

    @property
    def throughput(self):
        """Gets the throughput of this EbsBlockDevice.  # noqa: E501


        :return: The throughput of this EbsBlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this EbsBlockDevice.


        :param throughput: The throughput of this EbsBlockDevice.  # noqa: E501
        :type: int
        """

        self._throughput = throughput

    @property
    def volume_size(self):
        """Gets the volume_size of this EbsBlockDevice.  # noqa: E501


        :return: The volume_size of this EbsBlockDevice.  # noqa: E501
        :rtype: int
        """
        return self._volume_size

    @volume_size.setter
    def volume_size(self, volume_size):
        """Sets the volume_size of this EbsBlockDevice.


        :param volume_size: The volume_size of this EbsBlockDevice.  # noqa: E501
        :type: int
        """

        self._volume_size = volume_size

    @property
    def volume_type(self):
        """Gets the volume_type of this EbsBlockDevice.  # noqa: E501


        :return: The volume_type of this EbsBlockDevice.  # noqa: E501
        :rtype: str
        """
        return self._volume_type

    @volume_type.setter
    def volume_type(self, volume_type):
        """Sets the volume_type of this EbsBlockDevice.


        :param volume_type: The volume_type of this EbsBlockDevice.  # noqa: E501
        :type: str
        """

        self._volume_type = volume_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EbsBlockDevice):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EbsBlockDevice):
            return True

        return self.to_dict() != other.to_dict()
