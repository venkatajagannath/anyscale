# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class UpdateCloud(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'config': 'CloudConfig',
        'auto_add_user': 'bool'
    }

    attribute_map = {
        'config': 'config',
        'auto_add_user': 'auto_add_user'
    }

    def __init__(self, config=None, auto_add_user=None, local_vars_configuration=None):  # noqa: E501
        """UpdateCloud - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._config = None
        self._auto_add_user = None
        self.discriminator = None

        if config is not None:
            self.config = config
        if auto_add_user is not None:
            self.auto_add_user = auto_add_user

    @property
    def config(self):
        """Gets the config of this UpdateCloud.  # noqa: E501

        Additional configurable properties of this Cloud.  # noqa: E501

        :return: The config of this UpdateCloud.  # noqa: E501
        :rtype: CloudConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this UpdateCloud.

        Additional configurable properties of this Cloud.  # noqa: E501

        :param config: The config of this UpdateCloud.  # noqa: E501
        :type: CloudConfig
        """

        self._config = config

    @property
    def auto_add_user(self):
        """Gets the auto_add_user of this UpdateCloud.  # noqa: E501

        Whether all users in the organization should be automatically added to this cloud. This field is only relevant for organizations with cloud isolation enabled, because all users in the organization automatically have access to all clouds if cloud isolation is not enabled.  # noqa: E501

        :return: The auto_add_user of this UpdateCloud.  # noqa: E501
        :rtype: bool
        """
        return self._auto_add_user

    @auto_add_user.setter
    def auto_add_user(self, auto_add_user):
        """Sets the auto_add_user of this UpdateCloud.

        Whether all users in the organization should be automatically added to this cloud. This field is only relevant for organizations with cloud isolation enabled, because all users in the organization automatically have access to all clouds if cloud isolation is not enabled.  # noqa: E501

        :param auto_add_user: The auto_add_user of this UpdateCloud.  # noqa: E501
        :type: bool
        """

        self._auto_add_user = auto_add_user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCloud):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCloud):
            return True

        return self.to_dict() != other.to_dict()
