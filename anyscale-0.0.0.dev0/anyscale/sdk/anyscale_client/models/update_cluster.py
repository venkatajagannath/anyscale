# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class UpdateCluster(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'idle_timeout_minutes': 'int',
        'cluster_environment_build_id': 'str',
        'cluster_compute_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'idle_timeout_minutes': 'idle_timeout_minutes',
        'cluster_environment_build_id': 'cluster_environment_build_id',
        'cluster_compute_id': 'cluster_compute_id'
    }

    def __init__(self, name=None, idle_timeout_minutes=None, cluster_environment_build_id=None, cluster_compute_id=None, local_vars_configuration=None):  # noqa: E501
        """UpdateCluster - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._idle_timeout_minutes = None
        self._cluster_environment_build_id = None
        self._cluster_compute_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if idle_timeout_minutes is not None:
            self.idle_timeout_minutes = idle_timeout_minutes
        if cluster_environment_build_id is not None:
            self.cluster_environment_build_id = cluster_environment_build_id
        if cluster_compute_id is not None:
            self.cluster_compute_id = cluster_compute_id

    @property
    def name(self):
        """Gets the name of this UpdateCluster.  # noqa: E501

        Name of this Cluster.  # noqa: E501

        :return: The name of this UpdateCluster.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCluster.

        Name of this Cluster.  # noqa: E501

        :param name: The name of this UpdateCluster.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def idle_timeout_minutes(self):
        """Gets the idle_timeout_minutes of this UpdateCluster.  # noqa: E501

        Idle timeout in minutes.  # noqa: E501

        :return: The idle_timeout_minutes of this UpdateCluster.  # noqa: E501
        :rtype: int
        """
        return self._idle_timeout_minutes

    @idle_timeout_minutes.setter
    def idle_timeout_minutes(self, idle_timeout_minutes):
        """Sets the idle_timeout_minutes of this UpdateCluster.

        Idle timeout in minutes.  # noqa: E501

        :param idle_timeout_minutes: The idle_timeout_minutes of this UpdateCluster.  # noqa: E501
        :type: int
        """

        self._idle_timeout_minutes = idle_timeout_minutes

    @property
    def cluster_environment_build_id(self):
        """Gets the cluster_environment_build_id of this UpdateCluster.  # noqa: E501

        Cluster Environment Build that this Cluster is using. This property may only be changed if the Cluster is in the Terminated state.Use the Start Cluster operation if you wish to change this for a non-Terminated Cluster.  # noqa: E501

        :return: The cluster_environment_build_id of this UpdateCluster.  # noqa: E501
        :rtype: str
        """
        return self._cluster_environment_build_id

    @cluster_environment_build_id.setter
    def cluster_environment_build_id(self, cluster_environment_build_id):
        """Sets the cluster_environment_build_id of this UpdateCluster.

        Cluster Environment Build that this Cluster is using. This property may only be changed if the Cluster is in the Terminated state.Use the Start Cluster operation if you wish to change this for a non-Terminated Cluster.  # noqa: E501

        :param cluster_environment_build_id: The cluster_environment_build_id of this UpdateCluster.  # noqa: E501
        :type: str
        """

        self._cluster_environment_build_id = cluster_environment_build_id

    @property
    def cluster_compute_id(self):
        """Gets the cluster_compute_id of this UpdateCluster.  # noqa: E501

        Cluster Compute that this Cluster is using. This property may only be changed if the Cluster is in the Terminated state. Use the Start Cluster operation if you wish to change this for a non-Terminated Cluster.  # noqa: E501

        :return: The cluster_compute_id of this UpdateCluster.  # noqa: E501
        :rtype: str
        """
        return self._cluster_compute_id

    @cluster_compute_id.setter
    def cluster_compute_id(self, cluster_compute_id):
        """Sets the cluster_compute_id of this UpdateCluster.

        Cluster Compute that this Cluster is using. This property may only be changed if the Cluster is in the Terminated state. Use the Start Cluster operation if you wish to change this for a non-Terminated Cluster.  # noqa: E501

        :param cluster_compute_id: The cluster_compute_id of this UpdateCluster.  # noqa: E501
        :type: str
        """

        self._cluster_compute_id = cluster_compute_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCluster):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateCluster):
            return True

        return self.to_dict() != other.to_dict()
