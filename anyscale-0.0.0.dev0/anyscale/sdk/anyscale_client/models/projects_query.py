# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class ProjectsQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'TextQuery',
        'creator_id': 'TextQuery',
        'paging': 'PageQuery',
        'parent_cloud_id': 'TextQuery',
        'include_defaults': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'creator_id': 'creator_id',
        'paging': 'paging',
        'parent_cloud_id': 'parent_cloud_id',
        'include_defaults': 'include_defaults'
    }

    def __init__(self, name=None, creator_id=None, paging=None, parent_cloud_id=None, include_defaults=False, local_vars_configuration=None):  # noqa: E501
        """ProjectsQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._creator_id = None
        self._paging = None
        self._parent_cloud_id = None
        self._include_defaults = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if creator_id is not None:
            self.creator_id = creator_id
        if paging is not None:
            self.paging = paging
        if parent_cloud_id is not None:
            self.parent_cloud_id = parent_cloud_id
        if include_defaults is not None:
            self.include_defaults = include_defaults

    @property
    def name(self):
        """Gets the name of this ProjectsQuery.  # noqa: E501

        Filters Projects by name. If this field is absent, no filtering is done.  # noqa: E501

        :return: The name of this ProjectsQuery.  # noqa: E501
        :rtype: TextQuery
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsQuery.

        Filters Projects by name. If this field is absent, no filtering is done.  # noqa: E501

        :param name: The name of this ProjectsQuery.  # noqa: E501
        :type: TextQuery
        """

        self._name = name

    @property
    def creator_id(self):
        """Gets the creator_id of this ProjectsQuery.  # noqa: E501

        Filters Projects by creator_id. If this field is absent, no filtering is done.  # noqa: E501

        :return: The creator_id of this ProjectsQuery.  # noqa: E501
        :rtype: TextQuery
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ProjectsQuery.

        Filters Projects by creator_id. If this field is absent, no filtering is done.  # noqa: E501

        :param creator_id: The creator_id of this ProjectsQuery.  # noqa: E501
        :type: TextQuery
        """

        self._creator_id = creator_id

    @property
    def paging(self):
        """Gets the paging of this ProjectsQuery.  # noqa: E501

        Pagination information.  # noqa: E501

        :return: The paging of this ProjectsQuery.  # noqa: E501
        :rtype: PageQuery
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this ProjectsQuery.

        Pagination information.  # noqa: E501

        :param paging: The paging of this ProjectsQuery.  # noqa: E501
        :type: PageQuery
        """

        self._paging = paging

    @property
    def parent_cloud_id(self):
        """Gets the parent_cloud_id of this ProjectsQuery.  # noqa: E501

        Filters Projects by parent_cloud_id. If this field is absent, no filtering is done.  # noqa: E501

        :return: The parent_cloud_id of this ProjectsQuery.  # noqa: E501
        :rtype: TextQuery
        """
        return self._parent_cloud_id

    @parent_cloud_id.setter
    def parent_cloud_id(self, parent_cloud_id):
        """Sets the parent_cloud_id of this ProjectsQuery.

        Filters Projects by parent_cloud_id. If this field is absent, no filtering is done.  # noqa: E501

        :param parent_cloud_id: The parent_cloud_id of this ProjectsQuery.  # noqa: E501
        :type: TextQuery
        """

        self._parent_cloud_id = parent_cloud_id

    @property
    def include_defaults(self):
        """Gets the include_defaults of this ProjectsQuery.  # noqa: E501

        Whether to include default projects in the results.  # noqa: E501

        :return: The include_defaults of this ProjectsQuery.  # noqa: E501
        :rtype: bool
        """
        return self._include_defaults

    @include_defaults.setter
    def include_defaults(self, include_defaults):
        """Sets the include_defaults of this ProjectsQuery.

        Whether to include default projects in the results.  # noqa: E501

        :param include_defaults: The include_defaults of this ProjectsQuery.  # noqa: E501
        :type: bool
        """

        self._include_defaults = include_defaults

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectsQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectsQuery):
            return True

        return self.to_dict() != other.to_dict()
