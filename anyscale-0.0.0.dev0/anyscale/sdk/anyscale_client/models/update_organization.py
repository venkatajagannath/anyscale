# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class UpdateOrganization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sso_mode': 'SSOMode'
    }

    attribute_map = {
        'sso_mode': 'sso_mode'
    }

    def __init__(self, sso_mode=None, local_vars_configuration=None):  # noqa: E501
        """UpdateOrganization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sso_mode = None
        self.discriminator = None

        self.sso_mode = sso_mode

    @property
    def sso_mode(self):
        """Gets the sso_mode of this UpdateOrganization.  # noqa: E501

        Mode for use of single sign on (SSO) for your organization.WARNING: It is dangerous to require SSO if you are not confident it is correctly configured. Once SSO is required, users may not log into Anyscale without using SSO. If you lock all users out of your organization by requiring incorrectly configured SSO, you may need to contact Anyscale for support.  # noqa: E501

        :return: The sso_mode of this UpdateOrganization.  # noqa: E501
        :rtype: SSOMode
        """
        return self._sso_mode

    @sso_mode.setter
    def sso_mode(self, sso_mode):
        """Sets the sso_mode of this UpdateOrganization.

        Mode for use of single sign on (SSO) for your organization.WARNING: It is dangerous to require SSO if you are not confident it is correctly configured. Once SSO is required, users may not log into Anyscale without using SSO. If you lock all users out of your organization by requiring incorrectly configured SSO, you may need to contact Anyscale for support.  # noqa: E501

        :param sso_mode: The sso_mode of this UpdateOrganization.  # noqa: E501
        :type: SSOMode
        """
        if self.local_vars_configuration.client_side_validation and sso_mode is None:  # noqa: E501
            raise ValueError("Invalid value for `sso_mode`, must not be `None`")  # noqa: E501

        self._sso_mode = sso_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrganization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateOrganization):
            return True

        return self.to_dict() != other.to_dict()
