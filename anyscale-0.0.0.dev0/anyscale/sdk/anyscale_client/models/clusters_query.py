# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class ClustersQuery(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project_id': 'str',
        'name': 'TextQuery',
        'paging': 'PageQuery',
        'state_filter': 'list[ClusterState]',
        'archive_status': 'ArchiveStatus'
    }

    attribute_map = {
        'project_id': 'project_id',
        'name': 'name',
        'paging': 'paging',
        'state_filter': 'state_filter',
        'archive_status': 'archive_status'
    }

    def __init__(self, project_id=None, name=None, paging=None, state_filter=[], archive_status=None, local_vars_configuration=None):  # noqa: E501
        """ClustersQuery - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project_id = None
        self._name = None
        self._paging = None
        self._state_filter = None
        self._archive_status = None
        self.discriminator = None

        if project_id is not None:
            self.project_id = project_id
        if name is not None:
            self.name = name
        if paging is not None:
            self.paging = paging
        if state_filter is not None:
            self.state_filter = state_filter
        if archive_status is not None:
            self.archive_status = archive_status

    @property
    def project_id(self):
        """Gets the project_id of this ClustersQuery.  # noqa: E501

        Filters Clusters belonging to a Project. If this field is absent, no filtering is done.  # noqa: E501

        :return: The project_id of this ClustersQuery.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ClustersQuery.

        Filters Clusters belonging to a Project. If this field is absent, no filtering is done.  # noqa: E501

        :param project_id: The project_id of this ClustersQuery.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def name(self):
        """Gets the name of this ClustersQuery.  # noqa: E501

        Filters Clusters by name. If this field is absent, no filtering is done.  # noqa: E501

        :return: The name of this ClustersQuery.  # noqa: E501
        :rtype: TextQuery
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClustersQuery.

        Filters Clusters by name. If this field is absent, no filtering is done.  # noqa: E501

        :param name: The name of this ClustersQuery.  # noqa: E501
        :type: TextQuery
        """

        self._name = name

    @property
    def paging(self):
        """Gets the paging of this ClustersQuery.  # noqa: E501

        Pagination information.  # noqa: E501

        :return: The paging of this ClustersQuery.  # noqa: E501
        :rtype: PageQuery
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this ClustersQuery.

        Pagination information.  # noqa: E501

        :param paging: The paging of this ClustersQuery.  # noqa: E501
        :type: PageQuery
        """

        self._paging = paging

    @property
    def state_filter(self):
        """Gets the state_filter of this ClustersQuery.  # noqa: E501

        Filter Sessions by Session State. If this field is an empty set, no filtering is done.  # noqa: E501

        :return: The state_filter of this ClustersQuery.  # noqa: E501
        :rtype: list[ClusterState]
        """
        return self._state_filter

    @state_filter.setter
    def state_filter(self, state_filter):
        """Sets the state_filter of this ClustersQuery.

        Filter Sessions by Session State. If this field is an empty set, no filtering is done.  # noqa: E501

        :param state_filter: The state_filter of this ClustersQuery.  # noqa: E501
        :type: list[ClusterState]
        """

        self._state_filter = state_filter

    @property
    def archive_status(self):
        """Gets the archive_status of this ClustersQuery.  # noqa: E501

        The archive status to filter by. Defaults to unarchived.  # noqa: E501

        :return: The archive_status of this ClustersQuery.  # noqa: E501
        :rtype: ArchiveStatus
        """
        return self._archive_status

    @archive_status.setter
    def archive_status(self, archive_status):
        """Sets the archive_status of this ClustersQuery.

        The archive status to filter by. Defaults to unarchived.  # noqa: E501

        :param archive_status: The archive_status of this ClustersQuery.  # noqa: E501
        :type: ArchiveStatus
        """

        self._archive_status = archive_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClustersQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClustersQuery):
            return True

        return self.to_dict() != other.to_dict()
