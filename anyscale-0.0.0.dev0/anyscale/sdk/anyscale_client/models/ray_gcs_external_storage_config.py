# coding: utf-8

"""
    Anyscale API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from anyscale_client.configuration import Configuration


class RayGCSExternalStorageConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'address': 'str',
        'redis_certificate_path': 'str',
        'enable': 'bool'
    }

    attribute_map = {
        'address': 'address',
        'redis_certificate_path': 'redis_certificate_path',
        'enable': 'enable'
    }

    def __init__(self, address=None, redis_certificate_path='/etc/ssl/certs/ca-certificates.crt', enable=True, local_vars_configuration=None):  # noqa: E501
        """RayGCSExternalStorageConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._address = None
        self._redis_certificate_path = None
        self._enable = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if redis_certificate_path is not None:
            self.redis_certificate_path = redis_certificate_path
        if enable is not None:
            self.enable = enable

    @property
    def address(self):
        """Gets the address of this RayGCSExternalStorageConfig.  # noqa: E501

        Address to connect to external storage at. Must be accessible from instances running in the provided cloud.  # noqa: E501

        :return: The address of this RayGCSExternalStorageConfig.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this RayGCSExternalStorageConfig.

        Address to connect to external storage at. Must be accessible from instances running in the provided cloud.  # noqa: E501

        :param address: The address of this RayGCSExternalStorageConfig.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def redis_certificate_path(self):
        """Gets the redis_certificate_path of this RayGCSExternalStorageConfig.  # noqa: E501

        Path to the certificate on the head node. This path is only relevant when TLS is enabled.  # noqa: E501

        :return: The redis_certificate_path of this RayGCSExternalStorageConfig.  # noqa: E501
        :rtype: str
        """
        return self._redis_certificate_path

    @redis_certificate_path.setter
    def redis_certificate_path(self, redis_certificate_path):
        """Sets the redis_certificate_path of this RayGCSExternalStorageConfig.

        Path to the certificate on the head node. This path is only relevant when TLS is enabled.  # noqa: E501

        :param redis_certificate_path: The redis_certificate_path of this RayGCSExternalStorageConfig.  # noqa: E501
        :type: str
        """

        self._redis_certificate_path = redis_certificate_path

    @property
    def enable(self):
        """Gets the enable of this RayGCSExternalStorageConfig.  # noqa: E501

        Enable GCS Fault Tolerance (FT) for the service. Default is set to True.  # noqa: E501

        :return: The enable of this RayGCSExternalStorageConfig.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this RayGCSExternalStorageConfig.

        Enable GCS Fault Tolerance (FT) for the service. Default is set to True.  # noqa: E501

        :param enable: The enable of this RayGCSExternalStorageConfig.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RayGCSExternalStorageConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RayGCSExternalStorageConfig):
            return True

        return self.to_dict() != other.to_dict()
